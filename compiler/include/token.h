#ifndef FRX_TOKEN_H
#define FRX_TOKEN_H

#include "source_range.h"

#define FRX_TOKEN_TYPE_FIRST_KEYWORD FRX_TOKEN_TYPE_KW_U8
#define FRX_TOKEN_TYPE_LAST_KEYWORD FRX_TOKEN_TYPE_KW_DEFER

enum
{
    FRX_TOKEN_TYPE_EOF,

    FRX_TOKEN_TYPE_IDENT,
    FRX_TOKEN_TYPE_INT_LIT,
    FRX_TOKEN_TYPE_FLOAT_LIT,
    FRX_TOKEN_TYPE_CHAR_LIT,
    FRX_TOKEN_TYPE_STR_LIT,

    /* All keywords and primitives must be contiguous */
    FRX_TOKEN_TYPE_KW_U8,
    FRX_TOKEN_TYPE_KW_U16,
    FRX_TOKEN_TYPE_KW_U32,
    FRX_TOKEN_TYPE_KW_U64,
    FRX_TOKEN_TYPE_KW_USIZE,
    FRX_TOKEN_TYPE_KW_I8,
    FRX_TOKEN_TYPE_KW_I16,
    FRX_TOKEN_TYPE_KW_I32,
    FRX_TOKEN_TYPE_KW_I64,
    FRX_TOKEN_TYPE_KW_ISIZE,
    FRX_TOKEN_TYPE_KW_B8,
    FRX_TOKEN_TYPE_KW_B16,
    FRX_TOKEN_TYPE_KW_B32,
    FRX_TOKEN_TYPE_KW_B64,
    FRX_TOKEN_TYPE_KW_CHAR,
    FRX_TOKEN_TYPE_KW_F32,
    FRX_TOKEN_TYPE_KW_F64,
    FRX_TOKEN_TYPE_KW_VOID,

    FRX_TOKEN_TYPE_KW_NULLPTR,
    FRX_TOKEN_TYPE_KW_TRUE,
    FRX_TOKEN_TYPE_KW_FALSE,
    FRX_TOKEN_TYPE_KW_USE,
    FRX_TOKEN_TYPE_KW_PUB,
    FRX_TOKEN_TYPE_KW_MUT,
    FRX_TOKEN_TYPE_KW_RETURN,
    FRX_TOKEN_TYPE_KW_EXTERN,
    FRX_TOKEN_TYPE_KW_STRUCT,
    FRX_TOKEN_TYPE_KW_ENUM,
    FRX_TOKEN_TYPE_KW_IF,
    FRX_TOKEN_TYPE_KW_ELSE,
    FRX_TOKEN_TYPE_KW_SWITCH,
    FRX_TOKEN_TYPE_KW_CASE,
    FRX_TOKEN_TYPE_KW_DEFAULT,
    FRX_TOKEN_TYPE_KW_BREAK,
    FRX_TOKEN_TYPE_KW_CONTINUE,
    FRX_TOKEN_TYPE_KW_FOR,
    FRX_TOKEN_TYPE_KW_WHILE,
    FRX_TOKEN_TYPE_KW_DO,
    FRX_TOKEN_TYPE_KW_IMPL,
    FRX_TOKEN_TYPE_KW_SELF,
    FRX_TOKEN_TYPE_KW_DEFER,

    FRX_TOKEN_TYPE_PLUS,
    FRX_TOKEN_TYPE_PLUS_EQ,

    FRX_TOKEN_TYPE_MINUS,
    FRX_TOKEN_TYPE_MINUS_EQ,

    FRX_TOKEN_TYPE_STAR,
    FRX_TOKEN_TYPE_STAR_EQ,

    FRX_TOKEN_TYPE_SLASH,
    FRX_TOKEN_TYPE_SLASH_EQ,

    FRX_TOKEN_TYPE_MODULO,
    FRX_TOKEN_TYPE_MODULO_EQ,

    FRX_TOKEN_TYPE_LOG_AND,
    FRX_TOKEN_TYPE_LOG_OR,
    FRX_TOKEN_TYPE_LOG_NOT,
    FRX_TOKEN_TYPE_LOG_NEQ,
    FRX_TOKEN_TYPE_LOG_EQ,

    FRX_TOKEN_TYPE_BIT_AND,
    FRX_TOKEN_TYPE_BIT_AND_EQ,

    FRX_TOKEN_TYPE_BIT_OR,
    FRX_TOKEN_TYPE_BIT_OR_EQ,

    FRX_TOKEN_TYPE_BIT_XOR,
    FRX_TOKEN_TYPE_BIT_XOR_EQ,

    FRX_TOKEN_TYPE_BIT_NOT,

    FRX_TOKEN_TYPE_BIT_LSHIFT,
    FRX_TOKEN_TYPE_BIT_LSHIFT_EQ,

    FRX_TOKEN_TYPE_BIT_RSHIFT,
    FRX_TOKEN_TYPE_BIT_RSHIFT_EQ,

    FRX_TOKEN_TYPE_EQ,

    FRX_TOKEN_TYPE_GT,
    FRX_TOKEN_TYPE_GEQ,

    FRX_TOKEN_TYPE_LT,
    FRX_TOKEN_TYPE_LEQ,

    FRX_TOKEN_TYPE_PLUS_PLUS,
    FRX_TOKEN_TYPE_MINUS_MINUS,

    FRX_TOKEN_TYPE_LPAREN,
    FRX_TOKEN_TYPE_RPAREN,

    FRX_TOKEN_TYPE_LBRACKET,
    FRX_TOKEN_TYPE_RBRACKET,

    FRX_TOKEN_TYPE_LBRACE,
    FRX_TOKEN_TYPE_RBRACE,

    FRX_TOKEN_TYPE_ARROW,
    FRX_TOKEN_TYPE_DOT,
    FRX_TOKEN_TYPE_COMMA,
    FRX_TOKEN_TYPE_COLON,
    FRX_TOKEN_TYPE_SEMI,

    FRX_TOKEN_TYPE_ELLIPSIS,

    FRX_TOKEN_TYPE_RESOLUTION,

    FRX_TOKEN_TYPE_COUNT
};

typedef u8 TokenType;

typedef struct Token
{
    TokenType type;

    SourceRange range;

    char* identifier;
    u64 int_literal;
    f64 float_literal;
} Token;

#endif
