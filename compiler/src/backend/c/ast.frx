import "assert.frx";
import "binary_expr.frx";
import "break_stmt.frx";
import "c.frx";
import "char_literal.frx";
import "continue_stmt.frx";
import "do_while_loop.frx";
import "enum_constant.frx";
import "enum_def.frx";
import "expr_stmt.frx";
import "extern_block.frx";
import "float_literal.frx";
import "for_loop.frx";
import "func_call.frx";
import "func_decl.frx";
import "func_def.frx";
import "func_params.frx";
import "global_var_decl.frx";
import "global_var_def.frx";
import "if_stmt.frx";
import "initializer_list.frx";
import "int_literal.frx";
import "namespace.frx";
import "return_stmt.frx";
import "scope.frx";
import "sizeof.frx";
import "string_literal.frx";
import "struct_decl.frx";
import "struct_def.frx";
import "struct_member.frx";
import "switch_stmt.frx";
import "unary_expr.frx";
import "var.frx";
import "var_decl.frx";
import "var_def.frx";
import "while_loop.frx";
import "../../frontend/core/ast.frx";

export void transpile_ast(Transpiler* transpiler, AST* ast)
{
    frx::assert(ast != nullptr);

    void* node = ast->node;

    switch(ast->type)
    {
        case AstType::IMPORT_STMT:
        {
            break;
        }
        case AstType::EXTERN_BLOCK:
        {
            transpile_extern_block(transpiler, node);

            break;
        }
        case AstType::NAMESPACE:
        {
            transpile_namespace(transpiler, node);

            break;
        }
        case AstType::ENUM_DEF:
        {
            transpile_enum_def(transpiler, node);

            break;
        }
        case AstType::ENUM_CONSTANT:
        {
            transpile_enum_constant(transpiler, node);

            break;
        }
        case AstType::STRUCT_DECL:
        {
            transpile_struct_decl(transpiler, node);

            break;
        }
        case AstType::STRUCT_DEF:
        {
            transpile_struct_def(transpiler, node);

            break;
        }
        case AstType::STRUCT_MEMBER:
        {
            transpile_struct_member(transpiler, node);

            break;
        }
        case AstType::FUNC_DECL:
        {
            transpile_func_decl(transpiler, node);

            break;
        }
        case AstType::FUNC_DEF:
        {
            transpile_func_def(transpiler, node);

            break;
        }
        case AstType::FUNC_CALL:
        {
            transpile_func_call(transpiler, node);

            break;
        }
        case AstType::SCOPE:
        {
            transpile_scope(transpiler, node);

            break;
        }
        case AstType::GLOBAL_VAR_DECL:
        {
            transpile_global_var_decl(transpiler, node);

            break;
        }
        case AstType::GLOBAL_VAR_DEF:
        {
            transpile_global_var_def(transpiler, node);

            break;
        }
        case AstType::VAR_DECL:
        {
            transpile_var_decl(transpiler, node);

            break;
        }
        case AstType::VAR_DEF:
        {
            transpile_var_def(transpiler, node);

            break;
        }
        case AstType::VAR:
        {
            transpile_var(transpiler, node);

            break;
        }
        case AstType::UNARY_EXPR:
        {
            transpile_unary_expr(transpiler, node);

            break;
        }
        case AstType::BINARY_EXPR:
        {
            transpile_binary_expr(transpiler, node);

            break;
        }
        case AstType::EXPR_STMT:
        {
            transpile_expr_stmt(transpiler, node);

            break;
        }
        case AstType::BREAK_STMT:
        {
            transpile_break_stmt(transpiler, node);

            break;
        }
        case AstType::CONTINUE_STMT:
        {
            transpile_continue_stmt(transpiler, node);

            break;
        }
        case AstType::RETURN_STMT:
        {
            transpile_return_stmt(transpiler, node);

            break;
        }
        case AstType::FLOAT_LITERAL:
        {
            transpile_float_literal(transpiler, node);

            break;
        }
        case AstType::INT_LITERAL:
        {
            transpile_int_literal(transpiler, node);

            break;
        }
        case AstType::CHAR_LITERAL:
        {
            transpile_char_literal(transpiler, node);

            break;
        }
        case AstType::STRING_LITERAL:
        {
            transpile_string_literal(transpiler, node);

            break;
        }
        case AstType::IF_STMT:
        {
            transpile_if_stmt(transpiler, node);

            break;
        }
        case AstType::FOR_LOOP:
        {
            transpile_for_loop(transpiler, node);

            break;
        }
        case AstType::WHILE_LOOP:
        {
            transpile_while_loop(transpiler, node);

            break;
        }
        case AstType::DO_WHILE_LOOP:
        {
            transpile_do_while_loop(transpiler, node);

            break;
        }
        case AstType::SWITCH_STMT:
        {
            transpile_switch_stmt(transpiler, node);

            break;
        }
        case AstType::INITIALIZER_LIST:
        {
            transpile_initializer_list(transpiler, node);

            break;
        }
        case AstType::ASSERT:
        {
            transpile_assert(transpiler, node);

            break;
        }
        case AstType::SIZEOF:
        {
            transpile_sizeof(transpiler, node);

            break;
        }
        default:
        {
            frx::assert(false);

            break;
        }
    }
}
