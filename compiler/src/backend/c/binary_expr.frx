import "c.frx";
import "expr.frx";
import "../../frontend/ast/binary_expr.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export void transpile_binary_expr(Transpiler* transpiler, BinaryExpr* expr)
{
    frx::assert(transpiler != nullptr);

    frx::assert(expr != nullptr);

    switch(expr->operator)
    {
        case Operator::ARRAY_SUBSCRIPT:
        {
            transpile_expr(transpiler, expr->left);
            fprintf(transpiler->file, "[");
            transpile_expr(transpiler, expr->right);
            fprintf(transpiler->file, "]");

            break;
        }
        default:
        {
            fprintf(transpiler->file, "(");
            transpile_expr(transpiler, expr->left);
            fprintf(transpiler->file, " %s ", token_type_to_str(expr->type));
            transpile_expr(transpiler, expr->right);
            fprintf(transpiler->file, ")");

            break;
        }
    }
}
