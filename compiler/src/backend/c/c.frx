import "program.frx";
import "../../core/config.frx";
import "../../core/list.frx";
import "../../core/queue.frx";
import "../../frontend/core/namespace.frx";
import "../../frontend/syntax/program.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
    FILE* fopen(char* filepath, char* mode);
    void fclose(mut FILE* stream);
    char* strcat(mut char* dest, char* src);
    char* strcpy(mut char* dest, char* src);
    i32 system(char* command);
}

export enum TranspilerMode : u8
{
    MACROS,
    ENUMS,
    STRUCT_DECL,
    FUNC_DECL,
    GLOBAL_VARS,
    STRUCT_IMPL,
    FUNC_IMPL,

    COUNT
}

export struct Transpiler
{
    TranspilerMode mode;
    FILE* file;

    Namespace* current_namespace;

    Queue untranspiled_structs;
    List transpiled_symbols;
}

export i32 c_generate_code(ASTProgram* program)
{
    mut Transpiler transpiler;
    transpiler.file = fopen("/tmp/output.c", "w");

    if(transpiler.file == nullptr)
    {
        return 1;
    }

    transpiler.current_namespace = nullptr;

    queue_init(&transpiler.untranspiled_structs);
    list_init(&transpiler.transpiled_symbols);

    fprintf(transpiler.file, "#include <stddef.h>\n");
    fprintf(transpiler.file, "#include <stdint.h>\n");
    fprintf(transpiler.file, "#include <stdarg.h>\n");

    fprintf(transpiler.file, "typedef size_t usize;\n");
    fprintf(transpiler.file, "typedef int64_t isize;\n");
    fprintf(transpiler.file, "typedef int8_t i8;\n");
    fprintf(transpiler.file, "typedef int16_t i16;\n");
    fprintf(transpiler.file, "typedef int32_t i32;\n");
    fprintf(transpiler.file, "typedef int64_t i64;\n");
    fprintf(transpiler.file, "typedef uint8_t u8;\n");
    fprintf(transpiler.file, "typedef uint16_t u16;\n");
    fprintf(transpiler.file, "typedef uint32_t u32;\n");
    fprintf(transpiler.file, "typedef uint64_t u64;\n");
    fprintf(transpiler.file, "typedef u8 b8;\n");
    fprintf(transpiler.file, "typedef u16 b16;\n");
    fprintf(transpiler.file, "typedef u32 b32;\n");
    fprintf(transpiler.file, "typedef u64 b64;\n");
    fprintf(transpiler.file, "typedef float f32;\n");
    fprintf(transpiler.file, "typedef double f64;\n\n");

    transpile_program(&transpiler, program);

    fclose(transpiler.file);

    Config* config = get_config();

    char command[4096];
    strcpy(command, "gcc /tmp/output.c -o ");
    strcat(command, config->output);

    mut usize i;
    for(i = 0; i < list_size(&config->link_targets); i = i + 1)
    {
        char* link_target = list_get(&config->link_targets, i);
        strcat(command, " ");
        strcat(command, link_target);
    }

    return system(command);
}
