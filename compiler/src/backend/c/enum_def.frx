export void transpile_enum_def(Transpiler* transpiler, ASTEnumDef* enum_def)
{
    assert(transpiler != nullptr);

    assert(enum_def != nullptr);

    if(transpiler->mode != TRANSPILER_MODE_ENUMS)
    {
        return;
    }

    fprintf(transpiler->file, "enum {\n");

    char[strlen(enum_def->name) + 1] namespaced_name;
    strcpy(namespaced_name, enum_def->name);

    usize i;
    for(i = 0; i < strlen(namespaced_name); i = i + 1)
    {
        char temp = namespaced_name[i] = toupper(namespaced_name[i]);
    }

    for(i = 0; i < list_size(&enum_def->constants); i = i + 1)
    {
        ASTEnumConstant* constant = list_get(&enum_def->constants, i);

        fprintf(transpiler->file, "%s_%s = ", namespaced_name, constant->name);
        transpile_ast(transpiler, constant->value);
        fprintf(transpiler->file, ",\n");
    }

    fprintf(transpiler->file, "};\n");

    fprintf(transpiler->file, "typedef %s ", token_type_to_str(enum_def->type));
    transpile_enum_def_name(transpiler, enum_def);
    fprintf(transpiler->file, ";\n");
}

export void transpile_enum_def_name(Transpiler* transpiler,
    ASTEnumDef* enum_def)
{
    assert(transpiler != nullptr);

    assert(enum_def != nullptr);

    transpile_namespace_resolution(transpiler, enum_def->ns);
    fprintf(transpiler->file, "%s", enum_def->name);
}
