import "c.frx";
import "../core/mangling.frx";
import "../../frontend/syntax/enum_def.frx";

export void transpile_enum_def(Transpiler* transpiler, ASTEnumDef* enum_def)
{
    assert(transpiler != nullptr);

    assert(enum_def != nullptr);

    if(transpiler->mode != TRANSPILER_MODE_ENUMS)
    {
        return;
    }

    EnumSymbol* symbol = &enum_def->symbol;

    fprintf(transpiler->file, "enum {\n");

    char* mangled_name = mangle_enum_name(symbol->scope, symbol->ns,
        symbol->name);

    usize i;
    for(i = 0; i < list_size(&symbol->constants); i = i + 1)
    {
        ASTEnumConstantDef* constant = list_get(&symbol->constants, i);

        fprintf(transpiler->file, "%s_%s = ", mangled_name, constant->name);
        transpile_ast(transpiler, constant->value);
        fprintf(transpiler->file, ",\n");
    }

    fprintf(transpiler->file, "};\n");

    fprintf(transpiler->file, "typedef %s ", token_type_to_str(symbol->type));
    fprintf(transpiler->file, "%s;\n", mangled_name);
}
