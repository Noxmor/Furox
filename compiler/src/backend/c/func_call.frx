export void transpile_func_call(Transpiler* transpiler, ASTFuncCall* func_call)
{
    assert(transpiler != nullptr);

    assert(func_call != nullptr);

    ASTFuncDef* func_def = nullptr;
    if(func_call->ns == nullptr)
    {
        func_def = func_table_find_r(transpiler->current_namespace,
            func_call->name);
    }
    else
    {
        func_def = func_table_find(func_call->ns, func_call->name);
    }

    Namespace* ns = func_def->ns;
    transpile_namespace_resolution(transpiler, ns);

    fprintf(transpiler->file, "%s(", func_call->name);

    usize i;
    for(i = 0; i < list_size(&func_call->args); i = i + 1)
    {
        AST* ast = list_get(&func_call->args, i);
        transpile_ast(transpiler, ast);

        if(i < list_size(&func_call->args) - 1)
        {
            fprintf(transpiler->file, ", ");
        }
    }

    fprintf(transpiler->file, ")");
}
