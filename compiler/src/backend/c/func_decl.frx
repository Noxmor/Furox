import "std/libc.frx";
import "c.frx";
import "func_params.frx";
import "type_specifier.frx";
import "../../frontend/ast/func_decl.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export void transpile_func_decl(Transpiler* transpiler, FuncDecl* func_decl)
{
    frx::assert(transpiler != nullptr);

    frx::assert(func_decl != nullptr);

    if(transpiler->mode != TranspilerMode::FUNC_DECL)
    {
        return;
    }

    FuncSymbol* symbol = &func_decl->symbol;

    if(libc_strcmp(symbol->name, "va_start") == 0
        || libc_strcmp(symbol->name, "va_end") == 0
        || libc_strcmp(symbol->name, "opendir") == 0
        || libc_strcmp(symbol->name, "readdir") == 0
        || libc_strcmp(symbol->name, "closedir") == 0)
    {
        return;
    }

    transpile_type_specifier(transpiler, func_decl->return_type);
    fprintf(transpiler->file, "%s", symbol->name);
    transpile_func_params(transpiler, func_decl->params);
    fprintf(transpiler->file, ";\n");
}
