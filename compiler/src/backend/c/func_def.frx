import "c.frx";
import "func_params.frx";
import "scope.frx";
import "type_specifier.frx";
import "../core/mangling.frx";
import "../../frontend/symbols/func.frx";
import "../../frontend/syntax/func_def.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export void transpile_func_def(Transpiler* transpiler, ASTFuncDef* func_def)
{
    frx::assert(transpiler != nullptr);

    frx::assert(func_def != nullptr);

    FuncSymbol* symbol = &func_def->symbol;

    if(transpiler->mode == TranspilerMode::FUNC_DECL)
    {
        transpile_type_specifier(transpiler, func_def->return_type);

        fprintf(transpiler->file, "%s", mangle_function_name(symbol->scope,
            symbol->ns, symbol->name));
        transpile_func_params(transpiler, func_def->params);
        fprintf(transpiler->file, ";\n");
    }
    else if(transpiler->mode == TranspilerMode::FUNC_IMPL)
    {
        transpile_type_specifier(transpiler, func_def->return_type);

        fprintf(transpiler->file, "%s", mangle_function_name(symbol->scope,
            symbol->ns, symbol->name));
        transpile_func_params(transpiler, func_def->params);
        fprintf(transpiler->file, "\n");

        transpile_scope(transpiler, func_def->body);
    }
}
