import "c.frx";
import "type_specifier.frx";
import "../../core/list.frx";
import "../../frontend/ast/func_params.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

void transpile_func_param(Transpiler* transpiler, FuncParam* param)
{
    frx::assert(transpiler != nullptr);

    frx::assert(param != nullptr);

    VarSymbol* symbol = &param->symbol;

    transpile_type_specifier(transpiler, symbol->type);
    fprintf(transpiler->file, "%s", symbol->name);
}

export void transpile_func_params(Transpiler* transpiler, FuncParams* params)
{
    frx::assert(transpiler != nullptr);

    frx::assert(params != nullptr);

    fprintf(transpiler->file, "(");

    if(list_size(&params->params) > 0)
    {
        transpile_func_param(transpiler, list_get(&params->params, 0));
    }
    else
    {
        fprintf(transpiler->file, "void");
    }

    mut usize i;
    for(i = 1; i < list_size(&params->params); i = i + 1)
    {
        fprintf(transpiler->file, ", ");
        transpile_func_param(transpiler, list_get(&params->params, i));
    }

    if(params->variadic)
    {
        fprintf(transpiler->file, ", ...");
    }

    fprintf(transpiler->file, ")");
}
