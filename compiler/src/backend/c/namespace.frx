import "std/libc.frx";
import "ast.frx";
import "c.frx";
import "../../core/list.frx";
import "../../frontend/core/ast.frx";
import "../../frontend/syntax/namespace.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export void transpile_namespace(mut Transpiler* transpiler,
    ASTNamespace* namespace_node)
{
    Namespace* old_namespace = transpiler->current_namespace;
    transpiler->current_namespace = namespace_node->ns;

    mut usize i;
    for(i = 0; i < list_size(&namespace_node->global_scope); i = i + 1)
    {
        AST* ast = list_get(&namespace_node->global_scope, i);
        transpile_ast(transpiler, ast);
    }

    transpiler->current_namespace = old_namespace;
}

export void transpile_namespace_resolution(Transpiler* transpiler,
    mut Namespace* ns)
{
    frx::assert(transpiler != nullptr);

    while(ns != nullptr)
    {
        if(libc::strcmp(ns->name, "") != 0)
        {
            fprintf(transpiler->file, "%s_", ns->name);
        }

        ns = ns->parent;
    }
}
