export void transpile_sizeof(Transpiler* transpiler, ASTSizeof* sizeof_node)
{
    assert(transpiler != nullptr);

    assert(sizeof_node != nullptr);

    fprintf(transpiler->file, "sizeof(");

    if(sizeof_node->primitive_type != TOKEN_TYPE_ERROR)
    {
        fprintf(transpiler->file, "%s",
            token_type_to_str(sizeof_node->primitive_type));
    }
    else if(sizeof_node->enum_type != nullptr)
    {
        EnumSymbol* symbol = sizeof_node->enum_type;
        char* mangled_name = mangle_enum_name(symbol->scope, symbol->ns,
            symbol->name);

        fprintf(transpiler->file, "%s", mangled_name);
    }
    else
    {
        StructSymbol* symbol = sizeof_node->struct_type;
        char* mangled_name = mangle_struct_name(symbol->scope, symbol->ns,
            symbol->name);

        fprintf(transpiler->file, "%s", mangled_name);
    }

    fprintf(transpiler->file, ")");
}
