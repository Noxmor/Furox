import "c.frx";
import "expr.frx";
import "../core/mangling.frx";
import "../../core/list.frx";
import "../../frontend/ast/type_specifier.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export void transpile_type_specifier(Transpiler* transpiler,
    TypeSpecifier* type_specifier)
{
    frx::assert(transpiler != nullptr);

    frx::assert(type_specifier != nullptr);

    if(type_specifier->primitive_type != 0)
    {
        fprintf(transpiler->file, "%s",
            token_type_to_str(type_specifier->primitive_type));
    }
    else if(type_specifier->enum_type != nullptr)
    {
        EnumSymbol* enum_symbol = type_specifier->enum_type;
        fprintf(transpiler->file, "%s", mangle_enum_name(enum_symbol->scope,
            enum_symbol->ns, enum_symbol->name));
    }
    else if(type_specifier->struct_type != nullptr)
    {
        StructSymbol* struct_symbol = type_specifier->struct_type;
        mut char* name = struct_symbol->name;
        if(!struct_symbol->external)
        {
            name = mangle_struct_name(struct_symbol->scope, struct_symbol->ns,
                struct_symbol->name);
        }

        fprintf(transpiler->file, "%s", name);
    }

    mut usize i;
    for(i = 0; i < type_specifier->pointer_level; i = i + 1)
    {
        fprintf(transpiler->file, "*");
    }

    fprintf(transpiler->file, " ");
}

export void transpile_type_specifier_array_dimensions(Transpiler* transpiler,
    TypeSpecifier* type_specifier)
{
    frx::assert(transpiler != nullptr);

    frx::assert(type_specifier != nullptr);

    mut usize i;
    for(i = 0; i < list_size(&type_specifier->array_dimensions); i = i + 1)
    {
        fprintf(transpiler->file, "[");
        Expr* dimension_size = list_get(&type_specifier->array_dimensions, i);
        transpile_expr(transpiler, dimension_size);
        fprintf(transpiler->file, "]");
    }
}
