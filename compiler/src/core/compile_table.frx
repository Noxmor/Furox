struct CompileTableEntry
{
    char* filepath;

    CompileTableEntry* next;
}

macro COMPILE_TABLE_CAPACITY = 1024;

struct CompileTable
{
    CompileTableEntry*[COMPILE_TABLE_CAPACITY] entries;
}

CompileTable compile_table;

b8 compile_table_mark_file_as_compiled(char* filepath)
{
    assert(filepath != nullptr);

    u64 index = hash_djb2(filepath) % COMPILE_TABLE_CAPACITY;
    CompileTableEntry* entry = compile_table.entries[index];

    char* fullpath = realpath(filepath, nullptr);

    while(entry != nullptr)
    {
        if(strcmp(entry->filepath, fullpath) == 0)
        {
            free(fullpath);

            return false;
        }

        entry = entry->next;
    }

    CompileTableEntry* new_entry = malloc(sizeof(CompileTableEntry));
    new_entry->filepath = fullpath;
    new_entry->next = compile_table.entries[index];

    compile_table.entries[index] = new_entry;

    return true;
}
