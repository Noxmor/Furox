import "std/libc.frx";

export struct List
{
    void** items;
    usize size;
    usize capacity;
}

namespace List
{
    export void init(mut List* list)
    {
        frx::assert(list != nullptr);

        list->items = nullptr;
        list->size = (list->capacity = 0);
    }

    export void push(mut List* list, void* item)
    {
        frx::assert(list != nullptr);

        if(list->size >= list->capacity)
        {
            if(list->capacity > 0)
            {
                list->capacity = list->capacity * 2;
            }
            else
            {
                list->capacity = 1;
            }

            //TODO: Change sizeof to use void* instead of usize
            list->items = libc::realloc(list->items,
                list->capacity * frx::sizeof(usize));
        }

        list->items[list->size] = item;
        list->size = list->size + 1;
    }

    export void* get(List* list, usize index)
    {
        frx::assert(list != nullptr);

        frx::assert(index < list->size);

        return list->items[index];
    }

    export b8 contains(List* list, void* item)
    {
        frx::assert(list != nullptr);

        mut usize i;
        for(i = 0; i < size(list); i = i + 1)
        {
            void* list_item = get(list, i);
            if(list_item == item)
            {
                return true;
            }
        }

        return false;
    }

    export usize size(List* list)
    {
        frx::assert(list != nullptr);

        return list->size;
    }

    export void clear(mut List* list)
    {
        frx::assert(list != nullptr);

        list->size = 0;
    }

    export void destroy(List* list)
    {
        frx::assert(list != nullptr);

        libc::free(list->items);
    }
}
