ASTProgram* program;
b8 failed = false;

Queue syntax_queue;
Queue resolve_imports_queue;
Queue semantic_queue;

void compile(char* filepath)
{
    if(parser_table_find(filepath) != nullptr)
    {
        return;
    }

    if(!parser_table_insert(filepath))
    {
        return;
    }

    Parser* parser = parser_table_find(filepath);

    assert(parser != nullptr);

    queue_enqueue(&syntax_queue, parser);
}

void parse_args(usize argc, char** argv)
{
    usize i;
    for(i = 1; i < argc; i = i + 1)
    {
        char* arg = argv[i];
        if(!is_option(arg))
        {
            char[4096] fullpath;
            realpath(arg, fullpath);
            compile(fullpath);
        }
    }
}

void register_command_line_options()
{
    register_option('h', "help", OPTION_TYPE_NO_ARG);
    register_option('o', "output", OPTION_TYPE_REQ_ARG);
    register_option('\0', "target", OPTION_TYPE_REQ_ARG);
    register_option('\0', "emit-ast", OPTION_TYPE_NO_ARG);
}

usize Main(usize argc, char** argv)
{
    register_command_line_options();
    parse_command_line(argc, argv);

    lexer_init_keyword_table();

    queue_init(&syntax_queue);
    queue_init(&resolve_imports_queue);
    queue_init(&semantic_queue);

    program = make_program();

    parse_args(argc, argv);

    while(!queue_is_empty(&syntax_queue))
    {
        Parser* parser = queue_dequeue(&syntax_queue);
        parser_parse(parser);
        queue_enqueue(&resolve_imports_queue, parser);
    }

    while(!queue_is_empty(&resolve_imports_queue))
    {
        Parser* parser = queue_dequeue(&resolve_imports_queue);
        parser_resolve_imports(parser);
        queue_enqueue(&semantic_queue, parser);
    }

    while(!queue_is_empty(&semantic_queue))
    {
        Parser* parser = queue_dequeue(&semantic_queue);
        parser_analyze(parser);
        failed = failed || parser->failed;
        list_push(&program->translation_units, parser->translation_unit);
    }

    Option* emit_ast = find_long_option("emit-ast");
    if(emit_ast->arg != nullptr)
    {
        FILE* file = fopen("frx.ast", "w");
        if(file != nullptr)
        {
            print_program(program, file, 0);
            fclose(file);
        }
    }

    if(!failed)
    {
        backend_generate_code(BACKEND_TYPE_NATIVE, program, "output.c");
    }

    return 0;
}
