import "std/libc.frx";

export enum OptionType : u8
{
    NO_ARG,
    OPT_ARG,
    REQ_ARG
}

export struct Option
{
    u16 id;
    OptionType type;
    char short_name;
    char* long_name;
}

export Option create_option(u16 id, OptionType type, char short_name,
    char* long_name)
{
    mut Option opt;

    opt.id = id;
    opt.type = type;
    opt.short_name = short_name;
    opt.long_name = long_name;

    return opt;
}

export Option create_short_option(u16 id, OptionType type, char short_name)
{
    return create_option(id, type, short_name, nullptr);
}

export Option create_long_option(u16 id, OptionType type, char* long_name)
{
    return create_option(id, type, '\0', long_name);
}

mut char* current_option = nullptr;
mut char* arg = nullptr;
mut usize pos = 0;
mut usize current_option_index = 1;
mut usize next_positional_arg_index = 1;
mut b8 demarcated_options = false;

Option* find_option_by_short_name(Option* options, char short_name)
{
    mut usize i;
    for(i = 0; options[i].id != 0; i = i + 1)
    {
        if(options[i].short_name == short_name)
        {
            return &options[i];
        }
    }

    return &options[i];
}

Option* find_option_by_long_name(Option* options, char* long_name)
{
    mut usize i;
    for(i = 0; options[i].id != 0; i = i + 1)
    {
        if(libc::strcmp(options[i].long_name, long_name) == 0)
        {
            return &options[i];
        }
    }

    return &options[i];
}

export char* get_arg()
{
    return arg;
}

export usize get_positional_argc()
{
    return next_positional_arg_index - 1;
}

//TODO: Remove tmp, only needed at the moment in order for the bootstrap
//compiler to compile this correctly.
mut void* tmp;

export u16 parse_command_line(usize argc, char** argv, Option* options)
{
    if(current_option != nullptr)
    {
        pos = pos + 1;
        char short_name = current_option[pos];

        if(short_name != '\0')
        {
            Option* opt = find_option_by_short_name(options, short_name);

            if(opt->type == OptionType::NO_ARG)
            {
                return opt->id;
            }

            if(current_option[pos + 1] != '\0')
            {
                arg = &current_option[pos + 1];
                current_option = nullptr;
            }

            if(opt->type == OptionType::REQ_ARG && current_option != nullptr)
            {
                arg = argv[current_option_index];
                current_option_index = current_option_index + 1;
            }

            return opt->id;
        }

        current_option = nullptr;
    }

    if(current_option_index >= argc)
    {
        return 0;
    }

    char* option = argv[current_option_index];
    current_option_index = current_option_index + 1;

    if(option[0] != '-')
    {
        arg = option;

        char* temp = argv[next_positional_arg_index];
        tmp = (argv[next_positional_arg_index] = argv[current_option_index - 1]);
        tmp = (argv[current_option_index - 1] = temp);
        next_positional_arg_index = next_positional_arg_index + 1;

        return 1;
    }

    if(option[1] != '-')
    {
        current_option = option;
        arg = nullptr;
        pos = 0;
        return parse_command_line(argc, argv, options);
    }

    if(option[2] != '\0' && !demarcated_options)
    {
        char* long_name = option + 2;

        mut char* equals = libc::strchr(option, '=');
        if(equals != nullptr)
        {
            tmp = (equals[0] = '\0');
            arg = equals + 1;
        }

        Option* opt = find_option_by_long_name(options, long_name);

        if(opt->type == OptionType::NO_ARG)
        {
            return opt->id;
        }

        if(opt->type == OptionType::REQ_ARG && equals == nullptr)
        {
            arg = argv[current_option_index];
            current_option_index = current_option_index + 1;
        }

        return opt->id;
    }

    if(option[2] == '\0' && !demarcated_options)
    {
        demarcated_options = true;
    }

    return 0;
}
