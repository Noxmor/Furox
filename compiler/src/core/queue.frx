import "std/libc.frx";

struct QueueNode
{
    void* data;
    QueueNode* next;
}

export struct Queue
{
    QueueNode* front;
    QueueNode* rear;
}

namespace Queue
{
    export void init(mut Queue* queue)
    {
        frx::assert(queue != nullptr);

        queue->front = nullptr;
        queue->rear = nullptr;
    }

    export b8 is_empty(Queue* queue)
    {
        frx::assert(queue != nullptr);

        return queue->front == nullptr;
    }

    export b8 contains(Queue* queue, void* data)
    {
        frx::assert(queue != nullptr);

        mut QueueNode* node = queue->front;
        while(node != nullptr)
        {
            if(node->data == data)
            {
                return true;
            }

            node = node->next;
        }

        return false;
    }

    export void enqueue(mut Queue* queue, void* data)
    {
        frx::assert(queue != nullptr);

        mut QueueNode* node = libc::malloc(frx::sizeof(QueueNode));
        node->data = data;
        node->next = nullptr;

        if(is_empty(queue))
        {
            queue->front = node;
            queue->rear = node;
        }
        else
        {
            queue->rear->next = node;
            queue->rear = node;
        }
    }

    export void* dequeue(mut Queue* queue)
    {
        frx::assert(queue != nullptr);

        if(is_empty(queue))
        {
            return nullptr;
        }

        QueueNode* node = queue->front;
        void* data = node->data;

        queue->front = queue->front->next;

        libc::free(node);

        return data;
    }
}
