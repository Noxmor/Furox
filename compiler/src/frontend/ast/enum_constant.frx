import "../../core/arena.frx";
import "ast.frx";
import "namespace_resolution.frx";
export import "../core/namespace.frx";
export import "../core/scope.frx";
export import "../symbols/enum.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

namespace AST
{
    export struct EnumConstant
    {
        EnumSymbol* symbol;

        core::Namespace* enum_namespace;
        char* enum_name;
        char* name;
        core::Scope* scope;
    }

    namespace EnumConstant
    {
        export EnumConstant* new(Arena* arena, core::Namespace* enum_namespace,
            char* enum_name, char* name, core::Scope* scope)
        {
            frx::assert(enum_name != nullptr);

            frx::assert(name != nullptr);

            mut EnumConstant* constant = Arena::alloc(arena, frx::sizeof(EnumConstant));

            constant->symbol = nullptr;
            constant->enum_namespace = enum_namespace;
            constant->enum_name = enum_name;
            constant->name = name;
            constant->scope = scope;

            return constant;
        }

        export void print(EnumConstant* constant, mut FILE* file, usize depth)
        {
            frx::assert(constant != nullptr);

            frx::assert(file != nullptr);

            print_depth(file, depth);

            fprintf(file, "%s (", "enum-constant");
            AST::NamespaceResolution::print(file, constant->enum_namespace);
            fprintf(file, "%s::%s)\n", constant->enum_name, constant->name);
        }
    }
}
