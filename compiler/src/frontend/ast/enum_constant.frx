import "../../core/arena.frx";
import "ast.frx";
import "namespace_resolution.frx";
export import "../core/namespace.frx";
export import "../core/scope.frx";
export import "../symbols/enum.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct EnumConstant
{
    EnumSymbol* symbol;

    CoreNamespace* enum_namespace;
    char* enum_name;
    char* name;
    CoreScope* scope;
}

export EnumConstant* enum_constant_new(Arena* arena, CoreNamespace* enum_namespace,
        char* enum_name, char* name, CoreScope* scope)
{
    frx::assert(enum_name != nullptr);

    frx::assert(name != nullptr);

    mut EnumConstant* constant = arena_alloc(arena, frx::sizeof(EnumConstant));

    constant->symbol = nullptr;
    constant->enum_namespace = enum_namespace;
    constant->enum_name = enum_name;
    constant->name = name;
    constant->scope = scope;

    return constant;
}

export void enum_constant_print(EnumConstant* constant, mut FILE* file, usize depth)
{
    frx::assert(constant != nullptr);

    frx::assert(file != nullptr);

    print_depth(file, depth);

    fprintf(file, "%s (", "enum-constant");
    namespace_resolution_print(file, constant->enum_namespace);
    fprintf(file, "%s::%s)\n", constant->enum_name, constant->name);
}
