import "../../core/arena.frx";
import "ast.frx";
import "../core/source_range.frx";
import "func_params.frx";
import "type_specifier.frx";
export import "../symbols/func.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct FuncDecl
{
    SourceRange range;

    TypeSpecifier* return_type;
    FuncSymbol symbol;
    FuncParams* params;

    b8 is_redefinition;
}

export FuncDecl* func_decl_new(Arena* arena, CoreScope* scope, CoreNamespace* ns,
        char* name, TypeSpecifier* return_type)
{
    frx::assert(return_type != nullptr);

    mut FuncDecl* func_decl = arena_alloc(arena, frx::sizeof(FuncDecl));

    func_symbol_init(&func_decl->symbol, scope, ns, name, false, true);

    func_decl->return_type = return_type;
    func_decl->params = nullptr;
    func_decl->is_redefinition = false;

    return func_decl;
}

export void func_decl_print(FuncDecl* func_decl, mut FILE* file, usize depth)
{
    frx::assert(func_decl != nullptr);

    frx::assert(file != nullptr);

    print_depth(file, depth);

    FuncSymbol* symbol = &func_decl->symbol;

    fprintf(file, "%s (%s)\n", "function-declaration", symbol->name);

    type_specifier_print(func_decl->return_type, file, depth + 1);
    func_params_print(func_decl->params, file, depth + 1);
}
