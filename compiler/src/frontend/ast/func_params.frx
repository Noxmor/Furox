import "../../core/arena.frx";
import "../../core/list.frx";
import "ast.frx";
export import "type_specifier.frx";
export import "../symbols/var.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct FuncParam
{
    VarSymbol symbol;

    b8 is_redefinition;
}

export FuncParam* func_param_new(Arena* arena, TypeSpecifier* type,
        CoreScope* scope, char* name, b8 mutable)
{
    FuncParam* param = arena_alloc(arena, frx::sizeof(FuncParam));

    var_symbol_init(&param->symbol, nullptr, type, scope, name, false,
            mutable);

    return param;
}

void func_param_print(FuncParam* param, mut FILE* file, usize depth)
{
    frx::assert(param != nullptr);

    frx::assert(file != nullptr);

    VarSymbol* symbol = &param->symbol;

    print_depth(file, depth);
    fprintf(file, "%s\n", symbol->name);

    type_specifier_print(symbol->type, file, depth + 1);
}

export struct FuncParams
{
    b8 variadic;

    List params;
}

export FuncParams* func_params_new(Arena* arena)
{
    mut FuncParams* func_params = arena_alloc(arena,
            frx::sizeof(FuncParams));

    func_params->variadic = false;
    list_init(&func_params->params);

    return func_params;
}

export void func_params_print(FuncParams* func_params, mut FILE* file, usize depth)
{
    frx::assert(func_params != nullptr);

    frx::assert(file != nullptr);

    print_depth(file, depth);
    fprintf(file, "%s\n", "function-parameters");

    print_depth(file, depth + 1);
    fprintf(file, "variadic: %d\n", func_params->variadic);

    mut usize i;
    for(i = 0; i < list_size(&func_params->params); i = i + 1)
    {
        FuncParam* param = list_get(&func_params->params, i);
        func_param_print(param, file, depth + 1);
    }
}
