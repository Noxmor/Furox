import "std/libc.frx";
import "../../core/arena.frx";
export import "import_stmt.frx";
export import "extern_block.frx";
export import "struct_decl.frx";
export import "func_decl.frx";
export import "namespace.frx";
export import "enum_def.frx";
export import "struct_def.frx";
export import "func_def.frx";
export import "global_var_decl.frx";
export import "global_var_def.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

namespace AST
{
    export enum GlobalScopeType : u8
    {
        INVALID,
        IMPORT_STMT,
        EXTERN_BLOCK,
        STRUCT_DECL,
        FUNC_DECL,
        NAMESPACE,
        ENUM_DEF,
        STRUCT_DEF,
        FUNC_DEF,
        GLOBAL_VAR_DECL,
        GLOBAL_VAR_DEF
    }

    export struct GlobalScope
    {
        GlobalScopeType type;

        ImportStmt* import_stmt;
        ExternBlock* extern_block;
        StructDecl* struct_decl;
        FuncDecl* func_decl;
        Namespace* ns;
        EnumDef* enum_def;
        StructDef* struct_def;
        FuncDef* func_def;
        GlobalVarDecl* global_var_decl;
        GlobalVarDef* global_var_def;
    }

    namespace GlobalScope
    {
        GlobalScope* new(Arena* arena)
        {
            mut GlobalScope* global_scope = Arena::alloc(arena, frx::sizeof(GlobalScope));

            libc::memset(global_scope, 0, frx::sizeof(GlobalScope));
            global_scope->type = AST::GlobalScopeType::INVALID;

            return global_scope;
        }

        export GlobalScope* from_import_stmt(Arena* arena, ImportStmt* import_stmt)
        {
            frx::assert(import_stmt != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::IMPORT_STMT;
            global_scope->import_stmt = import_stmt;

            return global_scope;
        }

        export GlobalScope* from_extern_block(Arena* arena, ExternBlock* extern_block)
        {
            frx::assert(extern_block != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::EXTERN_BLOCK;
            global_scope->extern_block = extern_block;

            return global_scope;
        }

        export GlobalScope* from_struct_decl(Arena* arena, StructDecl* struct_decl)
        {
            frx::assert(struct_decl != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::STRUCT_DECL;
            global_scope->struct_decl = struct_decl;

            return global_scope;
        }

        export GlobalScope* from_func_decl(Arena* arena, FuncDecl* func_decl)
        {
            frx::assert(func_decl != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::FUNC_DECL;
            global_scope->func_decl = func_decl;

            return global_scope;
        }

        export GlobalScope* from_namespace(Arena* arena, Namespace* ns)
        {
            frx::assert(ns != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::NAMESPACE;
            global_scope->ns = ns;

            return global_scope;
        }

        export GlobalScope* from_enum_def(Arena* arena, EnumDef* enum_def)
        {
            frx::assert(enum_def != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::ENUM_DEF;
            global_scope->enum_def = enum_def;

            return global_scope;
        }

        export GlobalScope* from_struct_def(Arena* arena, StructDef* struct_def)
        {
            frx::assert(struct_def != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::STRUCT_DEF;
            global_scope->struct_def = struct_def;

            return global_scope;
        }

        export GlobalScope* from_func_def(Arena* arena, FuncDef* func_def)
        {
            frx::assert(func_def != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::FUNC_DEF;
            global_scope->func_def = func_def;

            return global_scope;
        }

        export GlobalScope* from_global_var_decl(Arena* arena, GlobalVarDecl* global_var_decl)
        {
            frx::assert(global_var_decl != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::GLOBAL_VAR_DECL;
            global_scope->global_var_decl = global_var_decl;

            return global_scope;
        }

        export GlobalScope* from_global_var_def(Arena* arena, GlobalVarDef* global_var_def)
        {
            frx::assert(global_var_def != nullptr);

            mut GlobalScope* global_scope = new(arena);

            global_scope->type = AST::GlobalScopeType::GLOBAL_VAR_DEF;
            global_scope->global_var_def = global_var_def;

            return global_scope;
        }

        export void print(GlobalScope* global_scope, mut FILE* file, usize depth)
        {
            frx::assert(global_scope != nullptr);

            frx::assert(file != nullptr);

            switch(global_scope->type)
            {
                case AST::GlobalScopeType::IMPORT_STMT:
                {
                    AST::ImportStmt::print(global_scope->import_stmt, file, depth);

                    break;
                }

                case AST::GlobalScopeType::EXTERN_BLOCK:
                {
                    AST::ExternBlock::print(global_scope->extern_block, file, depth);

                    break;
                }

                case AST::GlobalScopeType::STRUCT_DECL:
                {
                    AST::StructDecl::print(global_scope->struct_decl, file, depth);

                    break;
                }

                case AST::GlobalScopeType::FUNC_DECL:
                {
                    AST::FuncDecl::print(global_scope->func_decl, file, depth);

                    break;
                }

                case AST::GlobalScopeType::NAMESPACE:
                {
                    AST::Namespace::print(global_scope->ns, file, depth);

                    break;
                }

                case AST::GlobalScopeType::ENUM_DEF:
                {
                    AST::EnumDef::print(global_scope->enum_def, file, depth);

                    break;
                }

                case AST::GlobalScopeType::STRUCT_DEF:
                {
                    AST::StructDef::print(global_scope->struct_def, file, depth);

                    break;
                }

                case AST::GlobalScopeType::FUNC_DEF:
                {
                    AST::FuncDef::print(global_scope->func_def, file, depth);

                    break;
                }

                case AST::GlobalScopeType::GLOBAL_VAR_DECL:
                {
                    AST::GlobalVarDecl::print(global_scope->global_var_decl, file, depth);

                    break;
                }

                case AST::GlobalScopeType::GLOBAL_VAR_DEF:
                {
                    AST::GlobalVarDef::print(global_scope->global_var_def, file, depth);

                    break;
                }

                default:
                {
                    frx::assert(false);

                    break;
                }
            }
        }
    }
}
