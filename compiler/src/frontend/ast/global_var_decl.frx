import "../../core/arena.frx";
import "ast.frx";
import "../core/namespace.frx";
import "../core/scope.frx";
import "../symbols/var.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct GlobalVarDecl
{
    VarSymbol symbol;
}

export GlobalVarDecl* global_var_decl_new(Arena* arena, CoreNamespace* ns,
        TypeSpecifier* type, CoreScope* scope, char* name, b8 mutable)
{
    GlobalVarDecl* var_decl = arena_alloc(arena, frx::sizeof(GlobalVarDecl));

    var_symbol_init(&var_decl->symbol, ns, type, scope, name, true, mutable);

    return var_decl;
}

export void global_var_decl_print(GlobalVarDecl* var_decl, mut FILE* file, usize depth)
{
    frx::assert(var_decl != nullptr);

    frx::assert(file != nullptr);

    print_depth(file, depth);

    VarSymbol* symbol = &var_decl->symbol;

    fprintf(file, "%s (%s)\n", "global-variable-declaration", symbol->name);

    type_specifier_print(symbol->type, file, depth + 1);
}
