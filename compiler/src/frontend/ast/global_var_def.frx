import "../../core/arena.frx";
import "ast.frx";
export import "expr.frx";
export import "../symbols/var.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct GlobalVarDef
{
    VarSymbol symbol;

    Expr* value;
}

export GlobalVarDef* global_var_def_new(Arena* arena, CoreNamespace* ns,
        TypeSpecifier* type, CoreScope* scope, char* name, b8 mutable)
{
    GlobalVarDef* var_def = arena_alloc(arena, frx::sizeof(GlobalVarDef));

    var_symbol_init(&var_def->symbol, ns, type, scope, name, true, mutable);

    return var_def;
}

export void global_var_def_print(GlobalVarDef* var_def, mut FILE* file, usize depth)
{
    frx::assert(var_def != nullptr);

    frx::assert(file != nullptr);

    print_depth(file, depth);

    VarSymbol* symbol = &var_def->symbol;

    fprintf(file, "%s (%s)\n", "global-variable-definition", symbol->name);

    type_specifier_print(symbol->type, file, depth + 1);
    expr_print(var_def->value, file, depth + 1);
}
