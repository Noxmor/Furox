import "../../core/arena.frx";
import "ast.frx";
export import "expr.frx";
export import "scope.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

namespace AST
{
    export struct IfStmt
    {
        Expr* condition;
        Scope* if_block;
        Scope* else_block;
    }

    namespace IfStmt
    {
        export IfStmt* new(Arena* arena, Expr* condition, Scope* if_block, Scope* else_block)
        {
            frx::assert(condition != nullptr);

            frx::assert(if_block != nullptr);

            mut IfStmt* if_stmt = Arena::alloc(arena, frx::sizeof(IfStmt));

            if_stmt->condition = condition;
            if_stmt->if_block = if_block;
            if_stmt->else_block = else_block;

            return if_stmt;
        }

        export void print(IfStmt* if_stmt, mut FILE* file, usize depth)
        {
            frx::assert(if_stmt != nullptr);

            frx::assert(file != nullptr);

            print_depth(file, depth);

            fprintf(file, "%s\n", "if-statement");
            AST::Expr::print(if_stmt->condition, file, depth + 1);
            AST::Scope::print(if_stmt->if_block, file, depth + 1);

            if(if_stmt->else_block != nullptr)
            {
                AST::Scope::print(if_stmt->else_block, file, depth + 1);
            }
        }
    }
}
