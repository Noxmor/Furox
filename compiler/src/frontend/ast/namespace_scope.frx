import "std/libc.frx";
import "../../core/arena.frx";
export import "namespace.frx";
export import "enum_def.frx";
export import "struct_def.frx";
export import "func_def.frx";
export import "global_var_decl.frx";
export import "global_var_def.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

namespace AST
{
    export enum NamespaceScopeType : u8
    {
        INVALID,
        NAMESPACE,
        ENUM_DEF,
        STRUCT_DEF,
        FUNC_DEF,
        GLOBAL_VAR_DECL,
        GLOBAL_VAR_DEF
    }

    export struct NamespaceScope
    {
        NamespaceScopeType type;

        Namespace* ns;
        EnumDef* enum_def;
        StructDef* struct_def;
        FuncDef* func_def;
        GlobalVarDecl* global_var_decl;
        GlobalVarDef* global_var_def;
    }

    namespace NamespaceScope
    {
        NamespaceScope* new(Arena* arena)
        {
            mut NamespaceScope* namespace_scope = Arena::alloc(arena, frx::sizeof(NamespaceScope));

            libc::memset(namespace_scope, 0, frx::sizeof(NamespaceScope));
            namespace_scope->type = AST::NamespaceScopeType::INVALID;

            return namespace_scope;
        }

        export NamespaceScope* from_namespace(Arena* arena, Namespace* ns)
        {
            frx::assert(ns != nullptr);

            mut NamespaceScope* namespace_scope = new(arena);

            namespace_scope->type = AST::NamespaceScopeType::NAMESPACE;
            namespace_scope->ns = ns;
        }

        export NamespaceScope* from_enum_def(Arena* arena, EnumDef* enum_def)
        {
            frx::assert(enum_def != nullptr);

            mut NamespaceScope* namespace_scope = new(arena);

            namespace_scope->type = AST::NamespaceScopeType::ENUM_DEF;
            namespace_scope->enum_def = enum_def;
        }

        export NamespaceScope* from_struct_def(Arena* arena, StructDef* struct_def)
        {
            frx::assert(struct_def != nullptr);

            mut NamespaceScope* namespace_scope = new(arena);

            namespace_scope->type = AST::NamespaceScopeType::STRUCT_DEF;
            namespace_scope->struct_def = struct_def;
        }

        export NamespaceScope* from_func_def(Arena* arena, FuncDef* func_def)
        {
            frx::assert(func_def != nullptr);

            mut NamespaceScope* namespace_scope = new(arena);

            namespace_scope->type = AST::NamespaceScopeType::FUNC_DEF;
            namespace_scope->func_def = func_def;
        }

        export NamespaceScope* from_global_var_decl(Arena* arena, GlobalVarDecl* global_var_decl)
        {
            frx::assert(global_var_decl != nullptr);

            mut NamespaceScope* namespace_scope = new(arena);

            namespace_scope->type = AST::NamespaceScopeType::GLOBAL_VAR_DECL;
            namespace_scope->global_var_decl = global_var_decl;
        }

        export NamespaceScope* from_global_var_def(Arena* arena, GlobalVarDef* global_var_def)
        {
            frx::assert(global_var_def != nullptr);

            mut NamespaceScope* namespace_scope = new(arena);

            namespace_scope->type = AST::NamespaceScopeType::GLOBAL_VAR_DEF;
            namespace_scope->global_var_def = global_var_def;
        }

        export void print(NamespaceScope* namespace_scope, mut FILE* file, usize depth)
        {
            frx::assert(namespace_scope != nullptr);

            frx::assert(file != nullptr);

            switch(namespace_scope->type)
            {
                case AST::NamespaceScopeType::NAMESPACE:
                {
                    AST::Namespace::print(namespace_scope->ns, file, depth);

                    break;
                }

                case AST::NamespaceScopeType::ENUM_DEF:
                {
                    AST::EnumDef::print(namespace_scope->enum_def, file, depth);

                    break;
                }

                case AST::NamespaceScopeType::STRUCT_DEF:
                {
                    AST::StructDef::print(namespace_scope->struct_def, file, depth);

                    break;
                }

                case AST::NamespaceScopeType::FUNC_DEF:
                {
                    AST::FuncDef::print(namespace_scope->func_def, file, depth);

                    break;
                }

                case AST::NamespaceScopeType::GLOBAL_VAR_DECL:
                {
                    AST::GlobalVarDecl::print(namespace_scope->global_var_decl, file, depth);

                    break;
                }

                case AST::NamespaceScopeType::GLOBAL_VAR_DEF:
                {
                    AST::GlobalVarDef::print(namespace_scope->global_var_def, file, depth);

                    break;
                }

                default:
                {
                    frx::assert(false);

                    break;
                }
            }
        }
    }
}
