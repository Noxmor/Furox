import "../../core/arena.frx";
import "ast.frx";
export import "type_specifier.frx";
export import "../symbols/struct.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct StructField
{
    TypeSpecifier* type;
    char* name;
}

export StructField* struct_field_new(Arena* arena, TypeSpecifier* type, char* name)
{
    frx::assert(type != nullptr);

    frx::assert(name != nullptr);

    mut StructField* field = arena_alloc(arena, frx::sizeof(StructField));

    field->type = type;
    field->name = name;

    return field;
}

void struct_field_print(StructField* field, mut FILE* file, usize depth)
{
    frx::assert(field != nullptr);

    frx::assert(file != nullptr);

    fprintf(file, "%s\n", field->name);
}

export struct StructDef
{
    SourceRange range;

    StructSymbol symbol;

    b8 is_redefinition;
}

export StructDef* struct_def_new(Arena* arena, CoreScope* scope, CoreNamespace* ns,
        char* name, b8 exported)
{
    mut StructDef* struct_def = arena_alloc(arena, frx::sizeof(StructDef));

    struct_symbol_init(&struct_def->symbol, scope, ns, name, exported, false);

    struct_def->is_redefinition = false;

    return struct_def;
}

export void struct_def_print(StructDef* struct_def, mut FILE* file, usize depth)
{
    frx::assert(struct_def != nullptr);

    frx::assert(file != nullptr);

    print_depth(file, depth);

    StructSymbol* symbol = &struct_def->symbol;

    fprintf(file, "%s (%s)\n", "struct-definition", symbol->name);

    mut usize i;
    for(i = 0; i < list_size(&symbol->fields); i = i + 1)
    {
        StructField* field = list_get(&symbol->fields, i);
        struct_field_print(field, file, depth + 1);
    }
}
