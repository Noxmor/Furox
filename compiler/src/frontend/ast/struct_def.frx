import "../../core/arena.frx";
import "ast.frx";
export import "type_specifier.frx";
export import "../symbols/struct.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

namespace AST
{
    export struct StructField
    {
        TypeSpecifier* type;
        char* name;
    }

    namespace StructField
    {
        export StructField* new(Arena* arena, TypeSpecifier* type, char* name)
        {
            frx::assert(type != nullptr);

            frx::assert(name != nullptr);

            mut StructField* field = Arena::alloc(arena, frx::sizeof(StructField));

            field->type = type;
            field->name = name;

            return field;
        }

        void print(StructField* field, mut FILE* file, usize depth)
        {
            frx::assert(field != nullptr);

            frx::assert(file != nullptr);

            fprintf(file, "%s\n", field->name);
        }
    }

    export struct StructDef
    {
        SourceRange range;

        StructSymbol symbol;

        b8 is_redefinition;
    }

    namespace StructDef
    {
        export StructDef* new(Arena* arena, core::Scope* scope, core::Namespace* ns,
            char* name, b8 exported)
        {
            mut StructDef* struct_def = Arena::alloc(arena, frx::sizeof(StructDef));

            struct_symbol_init(&struct_def->symbol, scope, ns, name, exported, false);

            struct_def->is_redefinition = false;

            return struct_def;
        }

        export void print(StructDef* struct_def, mut FILE* file, usize depth)
        {
            frx::assert(struct_def != nullptr);

            frx::assert(file != nullptr);

            print_depth(file, depth);

            StructSymbol* symbol = &struct_def->symbol;

            fprintf(file, "%s (%s)\n", "struct-definition", symbol->name);

            mut usize i;
            for(i = 0; i < List::size(&symbol->fields); i = i + 1)
            {
                AST::StructField* field = List::get(&symbol->fields, i);
                AST::StructField::print(field, file, depth + 1);
            }
        }
    }
}
