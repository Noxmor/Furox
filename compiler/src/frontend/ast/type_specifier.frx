import "../../core/arena.frx";
import "../../core/list.frx";
import "ast.frx";
import "namespace_resolution.frx";
export import "../core/source_range.frx";
export import "../core/namespace.frx";
export import "../core/scope.frx";
export import "../core/token.frx";
export import "../symbols/enum.frx";
export import "../symbols/struct.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct TypeSpecifier
{
    SourceRange range;

    NamespaceResolution* resolution;
    char* name;
    CoreScope* scope;

    TokenType primitive_type;
    EnumSymbol* enum_type;
    StructSymbol* struct_type;

    usize pointer_level;

    List array_dimensions;
}

export TypeSpecifier* type_specifier_new(Arena* arena, NamespaceResolution* resolution, char* name,
        CoreScope* scope, TokenType primitive_type, usize pointer_level)
{
    frx::assert(resolution != nullptr);

    frx::assert(name != nullptr || primitive_type != TokenType::EOF);

    frx::assert(scope != nullptr);

    mut TypeSpecifier* type_specifier = arena_alloc(arena, frx::sizeof(TypeSpecifier));

    type_specifier->resolution= resolution;
    type_specifier->name = name;
    type_specifier->scope = scope;
    type_specifier->primitive_type = primitive_type;
    type_specifier->enum_type = nullptr;
    type_specifier->struct_type = nullptr;
    type_specifier->pointer_level = pointer_level;
    list_init(&type_specifier->array_dimensions);

    return type_specifier;
}

export void type_specifier_add_array_dimension(mut TypeSpecifier* type_specifier, Expr* array_dimension)
{
    frx::assert(type_specifier != nullptr);

    frx::assert(array_dimension != nullptr);

    list_push(&type_specifier->array_dimensions, array_dimension);
}

export void type_specifier_print(TypeSpecifier* type_specifier, mut FILE* file, usize depth)
{
    frx::assert(type_specifier != nullptr);

    frx::assert(file != nullptr);

    print_depth(file, depth);

    fprintf(file, "%s\n", "type-specifier");

    print_depth(file, depth + 1);

    fprintf(file, "type: ");
    if(type_specifier->primitive_type != 0)
    {
        fprintf(file, "%s", token_type_to_str(type_specifier->primitive_type));
    }
    else
    {
        namespace_resolution_print(file, type_specifier->resolution);
        fprintf(file, "%s", type_specifier->name);
    }

    fprintf(file, "\n");

    print_depth(file, depth + 1);

    fprintf(file, "pointer_level: %zu\n", type_specifier->pointer_level);

    print_depth(file, depth + 1);

    fprintf(file, "array-dimensions\n");

    mut usize i;
    for(i = 0; i < list_size(&type_specifier->array_dimensions); i = i + 1)
    {
        Expr* array_dimension = list_get(&type_specifier->array_dimensions, i);
        expr_print(array_dimension, file, depth + 2);
    }
}
