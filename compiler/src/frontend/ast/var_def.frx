import "../../core/arena.frx";
import "ast.frx";
export import "expr.frx";
export import "../symbols/var.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

namespace AST
{
    export struct VarDef
    {
        VarSymbol symbol;
        Expr* value;
    }

    namespace VarDef
    {
        export VarDef* new(Arena* arena, TypeSpecifier* type, core::Scope* scope,
            char* name, b8 mutable)
        {
            VarDef* var_def = arena_alloc(arena, frx::sizeof(VarDef));

            var_symbol_init(&var_def->symbol, nullptr, type, scope, name, false,
                mutable);

            return var_def;
        }

        export void print(VarDef* var_def, mut FILE* file, usize depth)
        {
            frx::assert(var_def != nullptr);

            frx::assert(file != nullptr);

            print_depth(file, depth);

            VarSymbol* symbol = &var_def->symbol;

            fprintf(file, "%s (%s)\n", "variable-definition", symbol->name);

            AST::TypeSpecifier::print(symbol->type, file, depth + 1);
            AST::Expr::print(var_def->value, file, depth + 1);
        }
    }
}
