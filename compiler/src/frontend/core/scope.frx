import "std/libc.frx";

namespace core
{
    export struct Scope
    {
        core::Scope* parent;
        usize id;
    }
}

mut usize next_scope_id;

export core::Scope* scope_create(core::Scope* parent)
{
    mut core::Scope* scope = libc::malloc(frx::sizeof(core::Scope));

    scope->parent = parent;
    scope->id = next_scope_id;

    next_scope_id = next_scope_id + 1;

    return scope;
}

export b8 scope_is_child_of(core::Scope* child, core::Scope* parent)
{
    frx::assert(child != nullptr && parent != nullptr);

    if(child->id == parent->id)
    {
        return true;
    }

    if(child->parent == nullptr)
    {
        return false;
    }

    return scope_is_child_of(child->parent, parent);
}

export b8 scope_same_root(mut core::Scope* left, mut core::Scope* right)
{
    frx::assert(left != nullptr);

    frx::assert(right != nullptr);

    while(left->parent != nullptr)
    {
        left = left->parent;
    }

    while(right->parent != nullptr)
    {
        right = right->parent;
    }

    return left->id == right->id;
}
