import "../../core/hash.frx";

extern
{
    void* malloc(usize size);
    i32 strcmp(char* str1, char* str2);
    char* strdup(char* str);
}

struct StringTableEntry
{
    char* str;
    StringTableEntry* next;
}

enum Constants : u64
{
    STRING_TABLE_CAPACITY = 1024
}

struct StringTable
{
    StringTableEntry* entries[Constants::STRING_TABLE_CAPACITY];
}

mut StringTable string_table;

export char* string_table_insert(char* str)
{
    frx::assert(str != nullptr);

    u64 index = hash_djb2(str) % Constants::STRING_TABLE_CAPACITY;
    mut StringTableEntry* entry = string_table.entries[index];

    while(entry != nullptr)
    {
        if(strcmp(entry->str, str) == 0)
        {
            return entry->str;
        }

        entry = entry->next;
    }

    mut StringTableEntry* new_entry = malloc(frx::sizeof(StringTableEntry));
    new_entry->str = strdup(str);
    new_entry->next = string_table.entries[index];

    string_table.entries[index] = new_entry;

    return new_entry->str;
}
