export import "source_range.frx";

//TODO: Replace with C-like direct indexing: [TOKEN_TYPE] = "string" to be indepentent of the order of declaration in the enum
char* token_type_names[TokenType::COUNT] = {
    "error",
    "eof",

    "identifier",
    "int-literal",
    "float-literal",

    "u8",
    "u16",
    "u32",
    "u64",
    "usize",
    "i8",
    "i16",
    "i32",
    "i64",
    "isize",
    "b8",
    "b16",
    "b32",
    "b64",
    "char",
    "f32",
    "f64",
    "void",

    "nullptr",
    "true",
    "false",
    "import",
    "export",
    "mut",
    "return",
    "namespace",
    "extern",
    "struct",
    "enum",
    "if",
    "else",
    "switch",
    "case",
    "default",
    "break",
    "continue",
    "for",
    "while",
    "do",
    "defer",
    "macro",

    "char-literal",
    "string-literal",

    "+",
    "+=",

    "-",
    "-=",

    "*",
    "*=",

    "/",
    "/=",

    "%",
    "%=",

    "&&",
    "||",
    "!",

    "&",
    "&=",

    "|",
    "|=",

    "^",
    "^=",

    "~",

    "<<",
    "<<=",

    ">>",
    ">>=",

    "=",
    "!=",
    "==",

    ">",
    ">=",

    "<",
    "<=",

    "++",
    "--",

    "(",
    ")",

    "[",
    "]",

    "{",
    "}",

    "->",
    ".",
    ",",
    ":",
    ";",

    "...",

    "::"
};

export enum TokenType : u8
{
    ERROR = 0,
    EOF,

    IDENTIFIER,
    INT_LITERAL,
    FLOAT_LITERAL,

    /* All keywords must be contiguous */
    KW_U8,
    KW_U16,
    KW_U32,
    KW_U64,
    KW_USIZE,
    KW_I8,
    KW_I16,
    KW_I32,
    KW_I64,
    KW_ISIZE,
    KW_B8,
    KW_B16,
    KW_B32,
    KW_B64,
    KW_CHAR,
    KW_F32,
    KW_F64,
    KW_VOID,

    KW_NULLPTR,
    KW_TRUE,
    KW_FALSE,
    KW_IMPORT,
    KW_EXPORT,
    KW_MUT,
    KW_RETURN,
    KW_NAMESPACE,
    KW_EXTERN,
    KW_STRUCT,
    KW_ENUM,
    KW_IF,
    KW_ELSE,
    KW_SWITCH,
    KW_CASE,
    KW_DEFAULT,
    KW_BREAK,
    KW_CONTINUE,
    KW_FOR,
    KW_WHILE,
    KW_DO,
    KW_DEFER,
    KW_MACRO,

    CHAR_LITERAL,
    STRING_LITERAL,

    PLUS,
    PLUS_EQ,

    MINUS,
    MINUS_EQ,

    STAR,
    STAR_EQ,

    DIVIDE,
    DIVIDE_EQ,

    MODULO,
    MODULO_EQ,

    LOG_AND,
    LOG_OR,
    LOG_NEG,

    BIN_AND,
    BIN_AND_EQ,

    BIN_OR,
    BIN_OR_EQ,

    BIN_XOR,
    BIN_XOR_EQ,

    BIN_NEG,

    BIN_LSHIFT,
    BIN_LSHIFT_EQ,

    BIN_RSHIFT,
    BIN_RSHIFT_EQ,

    EQ,
    LOG_NEQ,
    LOG_EQ,

    GT,
    GEQ,

    LT,
    LEQ,

    PLUS_PLUS,
    MINUS_MINUS,

    LPAREN,
    RPAREN,

    LBRACKET,
    RBRACKET,

    LBRACE,
    RBRACE,

    ARROW,
    DOT,
    COMMA,
    COLON,
    SEMICOLON,

    ELLIPSIS,

    NAMESPACE_RESOLUTION,

    COUNT
}

export TokenType token_type_first_keyword()
{
    return TokenType::KW_U8;
}

export TokenType token_type_last_keyword()
{
    return TokenType::KW_MACRO;
}

export b8 token_type_is_primitive(TokenType type)
{
    frx::assert(type < TokenType::COUNT);

    return type >= TokenType::KW_U8 && type <= TokenType::KW_VOID;
}

export usize primitive_type_to_size(TokenType primitive_type)
{
    frx::assert(token_type_is_primitive(primitive_type));

    switch(primitive_type)
    {
        case TokenType::KW_U8:
        {
            return 1;
        }
        case TokenType::KW_U16:
        {
            return 2;
        }
        case TokenType::KW_U32:
        {
            return 4;
        }
        case TokenType::KW_U64:
        {
            return 8;
        }
        case TokenType::KW_USIZE:
        {
            //TODO: Depends on the target architecture
            return 8;
        }
        case TokenType::KW_I8:
        {
            return 1;
        }
        case TokenType::KW_I16:
        {
            return 2;
        }
        case TokenType::KW_I32:
        {
            return 4;
        }
        case TokenType::KW_I64:
        {
            return 8;
        }
        case TokenType::KW_ISIZE:
        {
            //TODO: Depends on the target architecture
            return 8;
        }
        case TokenType::KW_B8:
        {
            return 1;
        }
        case TokenType::KW_B16:
        {
            return 2;
        }
        case TokenType::KW_B32:
        {
            return 4;
        }
        case TokenType::KW_B64:
        {
            return 8;
        }
        case TokenType::KW_CHAR:
        {
            return 1;
        }
        case TokenType::KW_F32:
        {
            return 4;
        }
        case TokenType::KW_F64:
        {
            return 8;
        }
    }
}

export b8 token_type_is_synchronizing(TokenType type)
{
    frx::assert(type < TokenType::COUNT);

    switch(type)
    {
        case TokenType::ERROR:
        {

        }
        case TokenType::EOF:
        {

        }
        case TokenType::RBRACE:
        {

        }
        case TokenType::SEMICOLON:
        {
            return true;
        }
    }

    return false;
}

export b8 token_type_is_prefix_operator(TokenType type)
{
    return token_type_to_prefix_operator(type) != Operator::INVALID;
}

export Operator token_type_to_prefix_operator(TokenType type)
{
    frx::assert(type < TokenType::COUNT);

    switch(type)
    {
        case TokenType::PLUS:
        {
            return Operator::SIGN_PLUS;
        }
        case TokenType::MINUS:
        {
            return Operator::SIGN_MINUS;
        }
        case TokenType::STAR:
        {
            return Operator::DEREF;
        }
        case TokenType::BIN_AND:
        {
            return Operator::ADDRESS_OF;
        }
        case TokenType::LOG_NEG:
        {
            return Operator::LOG_NEG;
        }
        case TokenType::BIN_NEG:
        {
            return Operator::BIN_NEG;
        }
        case TokenType::PLUS_PLUS:
        {
            return Operator::PREFIX_INC;
        }
        case TokenType::MINUS_MINUS:
        {
            return Operator::PREFIX_DEC;
        }
        default:
        {
            return Operator::INVALID;
        }
    }
}

export b8 token_type_is_infix_operator(TokenType type)
{
    return token_type_to_infix_operator(type) != Operator::INVALID;
}

export Operator token_type_to_infix_operator(TokenType type)
{
    frx::assert(type < TokenType::COUNT);

    switch(type)
    {
        case TokenType::PLUS:
        {
            return Operator::ADD;
        }
        case TokenType::PLUS_EQ:
        {
            return Operator::ADD_ASSIGN;
        }
        case TokenType::MINUS:
        {
            return Operator::SUB;
        }
        case TokenType::MINUS_EQ:
        {
            return Operator::SUB_ASSIGN;
        }
        case TokenType::STAR:
        {
            return Operator::MUL;
        }
        case TokenType::STAR_EQ:
        {
            return Operator::MUL_ASSIGN;
        }
        case TokenType::DIVIDE:
        {
            return Operator::DIV;
        }
        case TokenType::DIVIDE_EQ:
        {
            return Operator::DIV_ASSIGN;
        }
        case TokenType::MODULO:
        {
            return Operator::MOD;
        }
        case TokenType::MODULO_EQ:
        {
            return Operator::MOD_ASSIGN;
        }
        case TokenType::LOG_AND:
        {
            return Operator::LOG_AND;
        }
        case TokenType::LOG_OR:
        {
            return Operator::LOG_OR;
        }
        case TokenType::BIN_AND:
        {
            return Operator::BIN_AND;
        }
        case TokenType::BIN_AND_EQ:
        {
            return Operator::BIN_AND_ASSIGN;
        }
        case TokenType::BIN_OR:
        {
            return Operator::BIN_OR;
        }
        case TokenType::BIN_OR_EQ:
        {
            return Operator::BIN_OR_ASSIGN;
        }
        case TokenType::BIN_XOR:
        {
            return Operator::BIN_XOR;
        }
        case TokenType::BIN_XOR_EQ:
        {
            return Operator::BIN_XOR_ASSIGN;
        }
        case TokenType::BIN_LSHIFT:
        {
            return Operator::BIN_LSHIFT;
        }
        case TokenType::BIN_LSHIFT_EQ:
        {
            return Operator::BIN_LSHIFT_ASSIGN;
        }
        case TokenType::BIN_RSHIFT:
        {
            return Operator::BIN_RSHIFT;
        }
        case TokenType::BIN_RSHIFT_EQ:
        {
            return Operator::BIN_RSHIFT_ASSIGN;
        }
        case TokenType::EQ:
        {
            return Operator::ASSIGN;
        }
        case TokenType::LOG_NEQ:
        {
            return Operator::LOG_NEQ;
        }
        case TokenType::LOG_EQ:
        {
            return Operator::LOG_EQ;
        }
        case TokenType::GT:
        {
            return Operator::GT;
        }
        case TokenType::GEQ:
        {
            return Operator::GEQ;
        }
        case TokenType::LT:
        {
            return Operator::LT;
        }
        case TokenType::LEQ:
        {
            return Operator::LEQ;
        }
        case TokenType::LBRACKET:
        {
            return Operator::ARRAY_SUBSCRIPT;
        }
        case TokenType::ARROW:
        {
            return Operator::POINTER_MEMBER_ACCESS;
        }
        case TokenType::DOT:
        {
            return Operator::MEMBER_ACCESS;
        }
        default:
        {
            return Operator::INVALID;
        }
    }
}

export b8 token_type_is_postfix_operator(TokenType type)
{
    return token_type_to_postfix_operator(type) != Operator::INVALID;
}

export Operator token_type_to_postfix_operator(TokenType type)
{
    frx::assert(type < TokenType::COUNT);

    switch(type)
    {
        case TokenType::PLUS_PLUS:
        {
            return Operator::POSTFIX_INC;
        }
        case TokenType::MINUS_MINUS:
        {
            return Operator::POSTFIX_DEC;
        }
        case TokenType::LBRACKET:
        {
            return Operator::ARRAY_SUBSCRIPT;
        }
        default:
        {
            return Operator::INVALID;
        }
    }
}

export enum Operator : u8
{
    INVALID,

    POSTFIX_INC,
    POSTFIX_DEC,
    ARRAY_SUBSCRIPT,
    MEMBER_ACCESS,
    POINTER_MEMBER_ACCESS,

    PREFIX_INC,
    PREFIX_DEC,
    SIGN_PLUS,
    SIGN_MINUS,
    LOG_NEG,
    BIN_NEG,
    DEREF,
    ADDRESS_OF,

    MUL,
    DIV,
    MOD,

    ADD,
    SUB,

    BIN_LSHIFT,
    BIN_RSHIFT,

    LT,
    LEQ,
    GT,
    GEQ,

    LOG_EQ,
    LOG_NEQ,

    BIN_AND,

    BIN_XOR,

    BIN_OR,

    LOG_AND,

    LOG_OR,

    TERNARY,

    ASSIGN,
    ADD_ASSIGN,
    SUB_ASSIGN,
    MUL_ASSIGN,
    DIV_ASSIGN,
    MOD_ASSIGN,
    BIN_LSHIFT_ASSIGN,
    BIN_RSHIFT_ASSIGN,
    BIN_AND_ASSIGN,
    BIN_XOR_ASSIGN,
    BIN_OR_ASSIGN,

    COUNT
}

export Precedence operator_to_precedence(Operator op)
{
    frx::assert(op < Operator::COUNT);

    switch(op)
    {
        case Operator::POSTFIX_INC:
        {

        }
        case Operator::POSTFIX_DEC:
        {

        }
        case Operator::ARRAY_SUBSCRIPT:
        {

        }
        case Operator::POINTER_MEMBER_ACCESS:
        {

        }
        case Operator::MEMBER_ACCESS:
        {
            return Precedence::P1;
        }
        case Operator::PREFIX_INC:
        {

        }
        case Operator::PREFIX_DEC:
        {

        }
        case Operator::SIGN_PLUS:
        {

        }
        case Operator::SIGN_MINUS:
        {

        }
        case Operator::LOG_NEG:
        {

        }
        case Operator::BIN_NEG:
        {

        }
        case Operator::DEREF:
        {

        }
        case Operator::ADDRESS_OF:
        {
            return Precedence::P2;
        }
        case Operator::MUL:
        {

        }
        case Operator::DIV:
        {

        }
        case Operator::MOD:
        {
            return Precedence::P3;
        }
        case Operator::ADD:
        {

        }
        case Operator::SUB:
        {
            return Precedence::P4;
        }
        case Operator::BIN_LSHIFT:
        {

        }
        case Operator::BIN_RSHIFT:
        {
            return Precedence::P5;
        }
        case Operator::LT:
        {

        }
        case Operator::LEQ:
        {

        }
        case Operator::GT:
        {

        }
        case Operator::GEQ:
        {
            return Precedence::P6;
        }
        case Operator::LOG_EQ:
        {

        }
        case Operator::LOG_NEQ:
        {
            return Precedence::P7;
        }
        case Operator::BIN_AND:
        {
            return Precedence::P8;
        }
        case Operator::BIN_XOR:
        {
            return Precedence::P9;
        }
        case Operator::BIN_OR:
        {
            return Precedence::P10;
        }
        case Operator::LOG_AND:
        {
            return Precedence::P11;
        }
        case Operator::LOG_OR:
        {
            return Precedence::P12;
        }
        case Operator::TERNARY:
        {
            return Precedence::P13;
        }
        case Operator::ASSIGN:
        {

        }
        case Operator::ADD_ASSIGN:
        {

        }
        case Operator::SUB_ASSIGN:
        {

        }
        case Operator::MUL_ASSIGN:
        {

        }
        case Operator::DIV_ASSIGN:
        {

        }
        case Operator::MOD_ASSIGN:
        {

        }
        case Operator::BIN_LSHIFT_ASSIGN:
        {

        }
        case Operator::BIN_RSHIFT_ASSIGN:
        {

        }
        case Operator::BIN_AND_ASSIGN:
        {

        }
        case Operator::BIN_XOR_ASSIGN:
        {

        }
        case Operator::BIN_OR_ASSIGN:
        {
            return Precedence::P14;
        }
        default:
        {
            frx::assert(false);

            return Precedence::MIN;
        }
    }
}

export enum Precedence : u8
{
    MAX,

    P1,
    P2,
    P3,
    P4,
    P5,
    P6,
    P7,
    P8,
    P9,
    P10,
    P11,
    P12,
    P13,
    P14,

    MIN,

    COUNT
}

export struct Token
{
    TokenType type;

    SourceRange range;

    char* identifier;
    u64 int_literal;
    f64 float_literal;
}

export char* token_type_to_str(TokenType type)
{
    frx::assert(type < TokenType::COUNT);

    return token_type_names[type];
}
