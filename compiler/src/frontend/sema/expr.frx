export import "../ast/expr.frx";
import "../core/parser.frx";
import "enum_constant.frx";
import "func_call.frx";
import "internal_func_call.frx";
import "var.frx";
import "struct_member.frx";
import "unresolved_identifier.frx";
import "initializer_list.frx";
import "unary_expr.frx";
import "binary_expr.frx";

export void expr_sema(Parser* parser, mut Expr* expr)
{
    switch(expr->type)
    {
        case ExprType::INT_LITERAL:
            {
                break;
            }

        case ExprType::FLOAT_LITERAL:
            {
                break;
            }

        case ExprType::CHAR_LITERAL:
            {
                break;
            }

        case ExprType::STRING_LITERAL:
            {
                break;
            }

        case ExprType::ENUM_CONSTANT:
            {
                enum_constant_sema(parser, expr->enum_constant);

                break;
            }

        case ExprType::FUNC_CALL:
            {
                func_call_sema(parser, expr->func_call);

                break;
            }

        case ExprType::INTERNAL_FUNC_CALL:
            {
                internal_func_call_sema(parser, expr->internal_func_call, expr);

                break;
            }

        case ExprType::VAR:
            {
                var_sema(parser, expr->var);

                break;
            }

        case ExprType::STRUCT_MEMBER:
            {
                struct_member_sema(parser, expr->struct_member);

                break;
            }

        case ExprType::UNRESOLVED_IDENTIFIER:
            {
                unresolved_identifier_sema(parser, expr->unresolved_identifier, expr);

                break;
            }

        case ExprType::INITIALIZER_LIST:
            {
                initializer_list_sema(parser, expr->initializer_list);

                break;
            }

        case ExprType::UNARY_EXPR:
            {
                unary_expr_sema(parser, expr->unary_expr);

                break;
            }

        case ExprType::BINARY_EXPR:
            {
                binary_expr_sema(parser, expr->binary_expr);

                break;
            }

        default:
            {
                frx::assert(false);

                break;
            }
    }
}
