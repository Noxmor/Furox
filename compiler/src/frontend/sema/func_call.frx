import "expr.frx";
import "../core/errors.frx";
import "../core/parser.frx";
import "../ast/func_call.frx";
import "../../core/list.frx";

namespace AST::FuncCall
{
    export void sema(mut Parser* parser, mut FuncCall* func_call)
    {
        frx::assert(parser != nullptr);

        frx::assert(func_call != nullptr);

        if(func_call->ns == nullptr)
        {
            func_call->symbol = Parser::find_func_symbol_r(parser,
                parser->current_namespace, func_call->name);
        }
        else
        {
            func_call->symbol = Parser::find_func_symbol(parser, func_call->ns,
                func_call->name);
        }

        if(func_call->symbol == nullptr)
        {
            //FIXME: Print the correct location, this is only a placeholder
            SourceLocation loc;
            error_undefined_func_call(Parser::source_file(parser), loc,
                func_call->name);

            Parser::fail(parser);
        }

        mut usize i;
        for(i = 0; i < List::size(&func_call->args); i = i + 1)
        {
            Expr* arg = List::get(&func_call->args, i);
            AST::Expr::sema(parser, arg);
        }
    }
}
