import "type_specifier.frx";
import "func_params.frx";
import "scope.frx";
import "../core/errors.frx";
import "../core/parser.frx";
import "../symbols/func.frx";
import "../ast/func_def.frx";
import "../../core/list.frx";

export void func_def_sema(mut Parser* parser, mut FuncDef* func_def)
{
    frx::assert(parser != nullptr);

    frx::assert(func_def != nullptr);

    type_specifier_sema(parser, func_def->return_type);

    FuncSymbol* symbol = &func_def->symbol;

    mut usize i;
    for(i = 0; i < list_size(&parser->visible_parsers)
            && !func_def->is_redefinition; i = i + 1)
    {
        Parser* visible_parser = list_get(&parser->visible_parsers, i);
        FuncSymbol* imported_symbol = func_table_find(
                &visible_parser->func_table, symbol->ns, symbol->name, nullptr);

        func_def->is_redefinition = imported_symbol != nullptr
            && imported_symbol->exported;
    }

    if(func_def->is_redefinition)
    {
        error_func_def_redefinition(parser_source_file(parser),
                func_def->range.start, symbol->name);

        parser_fail(parser);
    }

    func_params_sema(parser, func_def->params);

    scope_sema(parser, func_def->body);
}
