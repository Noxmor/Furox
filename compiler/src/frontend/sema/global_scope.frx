import "../core/parser.frx";
import "import_stmt.frx";
import "extern_block.frx";
import "struct_decl.frx";
import "func_decl.frx";
import "enum_def.frx";
import "struct_def.frx";
import "func_def.frx";
import "global_var_decl.frx";
import "global_var_def.frx";
export import "../ast/global_scope.frx";

namespace AST::GlobalScope
{
    export void sema(Parser* parser, GlobalScope* global_scope)
    {
        frx::assert(parser != nullptr);

        frx::assert(global_scope != nullptr);

        switch(global_scope->type)
        {
            case AST::GlobalScopeType::IMPORT_STMT:
            {
                AST::ImportStmt::sema(parser, global_scope->import_stmt);

                break;
            }

            case AST::GlobalScopeType::EXTERN_BLOCK:
            {
                AST::ExternBlock::sema(parser, global_scope->extern_block);

                break;
            }

            case AST::GlobalScopeType::STRUCT_DECL:
            {
                AST::StructDecl::sema(parser, global_scope->struct_decl);

                break;
            }

            case AST::GlobalScopeType::FUNC_DECL:
            {
                AST::FuncDecl::sema(parser, global_scope->func_decl);

                break;
            }

            case AST::GlobalScopeType::ENUM_DEF:
            {
                AST::EnumDef::sema(parser, global_scope->enum_def);

                break;
            }

            case AST::GlobalScopeType::STRUCT_DEF:
            {
                AST::StructDef::sema(parser, global_scope->struct_def);

                break;
            }

            case AST::GlobalScopeType::FUNC_DEF:
            {
                AST::FuncDef::sema(parser, global_scope->func_def);

                break;
            }

            case AST::GlobalScopeType::GLOBAL_VAR_DECL:
            {
                AST::GlobalVarDecl::sema(parser, global_scope->global_var_decl);

                break;
            }

            case AST::GlobalScopeType::GLOBAL_VAR_DEF:
            {
                AST::GlobalVarDef::sema(parser, global_scope->global_var_def);

                break;
            }

            default:
            {
                frx::assert(false);

                break;
            }
        }
    }
}
