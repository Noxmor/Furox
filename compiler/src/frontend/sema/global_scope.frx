import "../core/parser.frx";
import "import_stmt.frx";
import "extern_block.frx";
import "struct_decl.frx";
import "func_decl.frx";
import "enum_def.frx";
import "struct_def.frx";
import "func_def.frx";
import "global_var_decl.frx";
import "global_var_def.frx";
export import "../ast/global_scope.frx";

export void global_scope_sema(Parser* parser, GlobalScope* global_scope)
{
    frx::assert(parser != nullptr);

    frx::assert(global_scope != nullptr);

    switch(global_scope->type)
    {
        case GlobalScopeType::IMPORT_STMT:
            {
                import_stmt_sema(parser, global_scope->import_stmt);

                break;
            }

        case GlobalScopeType::EXTERN_BLOCK:
            {
                extern_block_sema(parser, global_scope->extern_block);

                break;
            }

        case GlobalScopeType::STRUCT_DECL:
            {
                struct_decl_sema(parser, global_scope->struct_decl);

                break;
            }

        case GlobalScopeType::FUNC_DECL:
            {
                func_decl_sema(parser, global_scope->func_decl);

                break;
            }

        case GlobalScopeType::ENUM_DEF:
            {
                enum_def_sema(parser, global_scope->enum_def);

                break;
            }

        case GlobalScopeType::STRUCT_DEF:
            {
                struct_def_sema(parser, global_scope->struct_def);

                break;
            }

        case GlobalScopeType::FUNC_DEF:
            {
                func_def_sema(parser, global_scope->func_def);

                break;
            }

        case GlobalScopeType::GLOBAL_VAR_DECL:
            {
                global_var_decl_sema(parser, global_scope->global_var_decl);

                break;
            }

        case GlobalScopeType::GLOBAL_VAR_DEF:
            {
                global_var_def_sema(parser, global_scope->global_var_def);

                break;
            }

        default:
            {
                frx::assert(false);

                break;
            }
    }
}
