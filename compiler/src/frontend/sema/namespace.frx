import "namespace_scope.frx";
import "../core/errors.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../ast/namespace.frx";
import "../../core/list.frx";

namespace AST::Namespace
{
    export void sema(mut Parser* parser, Namespace* namespace_node)
    {
        frx::assert(parser != nullptr);

        frx::assert(namespace_node != nullptr);

        core::Namespace* ns = namespace_node->ns;

        if(namespace_is_internal(ns))
        {
            SourceLocation loc;
            error_namespace_is_reserved(parser->lexer.filepath, loc, ns);
            Parser::fail(parser);
        }

        core::Namespace* old_namespace = parser->current_namespace;
        parser->current_namespace = ns;

        mut usize i;
        for(i = 0; i < List::size(&namespace_node->namespace_scope); i = i + 1)
        {
            NamespaceScope* namespace_scope = List::get(&namespace_node->namespace_scope, i);
            AST::NamespaceScope::sema(parser, namespace_scope);
        }

        parser->current_namespace = old_namespace;
    }
}
