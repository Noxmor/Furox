import "type_specifier.frx";
import "../core/errors.frx";
import "../core/parser.frx";
import "../symbols/struct.frx";
import "../ast/struct_def.frx";
import "../../core/list.frx";

namespace AST::StructField
{
    void sema(Parser* parser, StructField* field)
    {
        frx::assert(parser != nullptr);

        frx::assert(field != nullptr);

        AST::TypeSpecifier::sema(parser, field->type);
    }
}

namespace AST::StructDef
{
    export void sema(mut Parser* parser, mut StructDef* struct_def)
    {
        frx::assert(parser != nullptr);

        frx::assert(struct_def != nullptr);

        StructSymbol* symbol = &struct_def->symbol;

        b8 is_redefinition = false;

        mut usize i;
        for(i = 0; i < list_size(&parser->visible_parsers)
            && !struct_def->is_redefinition; i = i + 1)
        {
            Parser* visible_parser = list_get(&parser->visible_parsers, i);
            StructSymbol* imported_symbol = struct_table_find(
                &visible_parser->struct_table, symbol->ns, symbol->name);

            struct_def->is_redefinition = imported_symbol != nullptr
                && imported_symbol->exported;
        }

        if(struct_def->is_redefinition)
        {
            error_struct_def_redefinition(parser_source_file(parser),
                struct_def->range.start, symbol->name);

            parser->failed = true;
        }

        for(i = 0; i < list_size(&symbol->fields); i = i + 1)
        {
            StructField* field = list_get(&symbol->fields, i);
            AST::StructField::sema(parser, field);
        }
    }
}
