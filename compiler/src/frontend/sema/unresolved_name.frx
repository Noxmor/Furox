import "expr.frx";
import "../core/errors.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/var.frx";
import "../ast/unresolved_name.frx";
import "../ast/var.frx";

namespace AST::UnresolvedName
{
    export void sema(mut Parser* parser, UnresolvedName* unresolved_name, mut Expr* expr)
    {
        frx::assert(parser != nullptr);

        frx::assert(unresolved_name != nullptr);

        core::Namespace* ns = parser->current_namespace;
        char* name = unresolved_name->name;
        core::Scope* scope = unresolved_name->scope;

        VarSymbol* var_symbol = var_table_find_by_scope(&parser->var_table, scope,
            name);

        b8 is_var = var_symbol != nullptr;

        b8 is_ambiguous = false;
        b8 resolved = is_var;

        if(is_ambiguous)
        {
            error_ambiguous_unresolved_name(Parser::source_file(parser),
                unresolved_name->range.start, name);
            Parser::fail(parser);
        }
        else if(is_var)
        {
            expr->type = AST::ExprType::VAR;
            expr->var = AST::Var::new(&parser->arena, nullptr, scope, name);
        }
        else
        {
            error_unresolved_name(Parser::source_file(parser),
                unresolved_name->range.start, name);
            Parser::fail(parser);
        }

        if(!is_ambiguous && resolved)
        {
            AST::Expr::sema(parser, expr);
        }
    }
}
