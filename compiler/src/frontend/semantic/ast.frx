export void analyze_ast(Parser* parser, AST* ast)
{
    assert(ast != nullptr);

    void* node = ast->node;

    switch(ast->type)
    {
        case AST_TYPE_IMPORT_STMT:
        {
            analyze_import_stmt(parser, node);

            break;
        }
        case AST_TYPE_EXTERN_BLOCK:
        {
            analyze_extern_block(parser, node);

            break;
        }
        case AST_TYPE_NAMESPACE:
        {
            analyze_namespace(parser, node);

            break;
        }
        case AST_TYPE_ENUM_DEF:
        {
            analyze_enum_def(parser, node);

            break;
        }
        case AST_TYPE_ENUM_CONSTANT:
        {
            analyze_enum_constant(parser, node);

            break;
        }
        case AST_TYPE_STRUCT_DEF:
        {
            analyze_struct_def(parser, node);

            break;
        }
        case AST_TYPE_FUNC_DECL:
        {
            analyze_func_decl(parser, node);

            break;
        }
        case AST_TYPE_FUNC_DEF:
        {
            analyze_func_def(parser, node);

            break;
        }
        case AST_TYPE_FUNC_CALL:
        {
            analyze_func_call(parser, node);

            break;
        }
        case AST_TYPE_SCOPE:
        {
            analyze_scope(parser, node);

            break;
        }
        case AST_TYPE_GLOBAL_VAR_DECL:
        {
            analyze_global_var_decl(parser, node);

            break;
        }
        case AST_TYPE_GLOBAL_VAR_DEF:
        {
            analyze_global_var_def(parser, node);

            break;
        }
        case AST_TYPE_VAR_DECL:
        {
            analyze_var_decl(parser, node);

            break;
        }
        case AST_TYPE_VAR_DEF:
        {
            analyze_var_def(parser, node);

            break;
        }
        case AST_TYPE_VAR:
        {
            analyze_var(parser, node);

            break;
        }
        case AST_TYPE_ENUM_CONSTANT_OR_GLOBAL_VAR:
        {
            analyze_enum_constant_or_global_var(parser, node, ast);

            break;
        }
        case AST_TYPE_UNARY_EXPR:
        {
            analyze_unary_expr(parser, node);

            break;
        }
        case AST_TYPE_BINARY_EXPR:
        {
            analyze_binary_expr(parser, node);

            break;
        }
        case AST_TYPE_EXPR_STMT:
        {
            analyze_expr_stmt(parser, node);

            break;
        }
        case AST_TYPE_BREAK_STMT:
        {
            break;
        }
        case AST_TYPE_CONTINUE_STMT:
        {
            break;
        }
        case AST_TYPE_RETURN_STMT:
        {
            analyze_return_stmt(parser, node);

            break;
        }
        case AST_TYPE_INT_LITERAL:
        {
            break;
        }
        case AST_TYPE_CHAR_LITERAL:
        {
            break;
        }
        case AST_TYPE_STRING_LITERAL:
        {
            break;
        }
        case AST_TYPE_IF_STMT:
        {
            analyze_if_stmt(parser, node);

            break;
        }
        case AST_TYPE_FOR_LOOP:
        {
            analyze_for_loop(parser, node);

            break;
        }
        case AST_TYPE_WHILE_LOOP:
        {
            analyze_while_loop(parser, node);

            break;
        }
        case AST_TYPE_DO_WHILE_LOOP:
        {
            analyze_do_while_loop(parser, node);

            break;
        }
        case AST_TYPE_SIZEOF:
        {
            analyze_sizeof(parser, node, ast);

            break;
        }
        case AST_TYPE_ENUM_COUNT:
        {
            analyze_enum_count(parser, node, ast);

            break;
        }
        default:
        {
            assert(false);

            break;
        }
    }
}
