import "binary_expr.frx";
import "do_while_loop.frx";
import "enum_constant.frx";
import "enum_def.frx";
import "expr_stmt.frx";
import "extern_block.frx";
import "for_loop.frx";
import "func_call.frx";
import "func_decl.frx";
import "func_def.frx";
import "global_var_decl.frx";
import "global_var_def.frx";
import "if_stmt.frx";
import "import_stmt.frx";
import "initializer_list.frx";
import "internal_func_call.frx";
import "namespace.frx";
import "return_stmt.frx";
import "scope.frx";
import "struct_decl.frx";
import "struct_def.frx";
import "struct_member.frx";
import "switch_stmt.frx";
import "unary_expr.frx";
import "unresolved_name.frx";
import "unresolved_namespaced_name.frx";
import "var.frx";
import "var_decl.frx";
import "var_def.frx";
import "while_loop.frx";
import "../core/ast.frx";
import "../core/parser.frx";

export void analyze_ast(mut Parser* parser, AST* ast)
{
    frx::assert(ast != nullptr);

    void* node = ast->node;

    switch(ast->type)
    {
        case AstType::ERROR:
        {
            parser->failed = true;

            break;
        }
        case AstType::IMPORT_STMT:
        {
            analyze_import_stmt(parser, node);

            break;
        }
        case AstType::EXTERN_BLOCK:
        {
            analyze_extern_block(parser, node);

            break;
        }
        case AstType::NAMESPACE:
        {
            analyze_namespace(parser, node);

            break;
        }
        case AstType::ENUM_DEF:
        {
            analyze_enum_def(parser, node);

            break;
        }
        case AstType::ENUM_CONSTANT:
        {
            analyze_enum_constant(parser, node);

            break;
        }
        case AstType::STRUCT_DECL:
        {
            analyze_struct_decl(parser, node);

            break;
        }
        case AstType::STRUCT_DEF:
        {
            analyze_struct_def(parser, node);

            break;
        }
        case AstType::STRUCT_MEMBER:
        {
            analyze_struct_member(parser, node);

            break;
        }
        case AstType::FUNC_DECL:
        {
            analyze_func_decl(parser, node);

            break;
        }
        case AstType::FUNC_DEF:
        {
            analyze_func_def(parser, node);

            break;
        }
        case AstType::FUNC_CALL:
        {
            analyze_func_call(parser, node);

            break;
        }
        case AstType::SCOPE:
        {
            analyze_scope(parser, node);

            break;
        }
        case AstType::GLOBAL_VAR_DECL:
        {
            analyze_global_var_decl(parser, node);

            break;
        }
        case AstType::GLOBAL_VAR_DEF:
        {
            analyze_global_var_def(parser, node);

            break;
        }
        case AstType::VAR_DECL:
        {
            analyze_var_decl(parser, node);

            break;
        }
        case AstType::VAR_DEF:
        {
            analyze_var_def(parser, node);

            break;
        }
        case AstType::VAR:
        {
            analyze_var(parser, node);

            break;
        }
        case AstType::UNARY_EXPR:
        {
            analyze_unary_expr(parser, node);

            break;
        }
        case AstType::BINARY_EXPR:
        {
            analyze_binary_expr(parser, node);

            break;
        }
        case AstType::EXPR_STMT:
        {
            analyze_expr_stmt(parser, node);

            break;
        }
        case AstType::BREAK_STMT:
        {
            break;
        }
        case AstType::CONTINUE_STMT:
        {
            break;
        }
        case AstType::RETURN_STMT:
        {
            analyze_return_stmt(parser, node);

            break;
        }
        case AstType::FLOAT_LITERAL:
        {
            break;
        }
        case AstType::INT_LITERAL:
        {
            break;
        }
        case AstType::CHAR_LITERAL:
        {
            break;
        }
        case AstType::STRING_LITERAL:
        {
            break;
        }
        case AstType::IF_STMT:
        {
            analyze_if_stmt(parser, node);

            break;
        }
        case AstType::FOR_LOOP:
        {
            analyze_for_loop(parser, node);

            break;
        }
        case AstType::WHILE_LOOP:
        {
            analyze_while_loop(parser, node);

            break;
        }
        case AstType::DO_WHILE_LOOP:
        {
            analyze_do_while_loop(parser, node);

            break;
        }
        case AstType::SWITCH_STMT:
        {
            analyze_switch_stmt(parser, node);

            break;
        }
        case AstType::INITIALIZER_LIST:
        {
            analyze_initializer_list(parser, node);

            break;
        }
        case AstType::ASSERT:
        {
            analyze_assert(parser, node);

            break;
        }
        case AstType::SIZEOF:
        {
            analyze_sizeof(parser, node);

            break;
        }
        case AstType::ENUM_COUNT:
        {
            analyze_enum_count(parser, node, ast);

            break;
        }
        case AstType::UNRESOLVED_NAME:
        {
            analyze_unresolved_name(parser, node, ast);

            break;
        }
        case AstType::UNRESOLVED_NAMESPACED_NAME:
        {
            analyze_unresolved_namespaced_name(parser, node, ast);

            break;
        }
        default:
        {
            frx::assert(false);

            break;
        }
    }
}
