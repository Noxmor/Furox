import "ast.frx";
import "../core/parser.frx";
import "../syntax/enum_constant_or_global_var.frx";

export void analyze_enum_constant_or_global_var(Parser* parser,
    ASTEnumConstantOrGlobalVar* enum_constant_or_global_var, AST* ast)
{
    assert(parser != nullptr);

    assert(enum_constant_or_global_var != nullptr);

    Namespace* ns = enum_constant_or_global_var->ns;
    char* name = enum_constant_or_global_var->name;
    Scope* scope = enum_constant_or_global_var->scope;

    b8 is_enum_constant = parser_find_enum_symbol(parser, ns->parent, ns->name)
        != nullptr;
    if(is_enum_constant)
    {
        ast->type = AST_TYPE_ENUM_CONSTANT;
        ast->node = make_enum_constant(&parser->arena, ns->parent, ns->name,
            name, scope);
    }
    else
    {
        ast->type = AST_TYPE_VAR;
        ast->node = make_var(&parser->arena, ns,
            enum_constant_or_global_var->scope, name);
    }

    analyze_ast(parser, ast);
}
