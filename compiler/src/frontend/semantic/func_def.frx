import "func_params.frx";
import "scope.frx";
import "../core/errors.frx";
import "../core/parser.frx";
import "../syntax/func_def.frx";

export void analyze_func_def(Parser* parser, ASTFuncDef* func_def)
{
    assert(parser != nullptr);

    assert(func_def != nullptr);

    analyze_type_specifier(parser, func_def->return_type);

    FuncSymbol* symbol = &func_def->symbol;

    b8 is_redefinition = false;

    usize i;
    for(i = 0; i < list_size(&parser->visible_parsers) && !is_redefinition;
        i = i + 1)
    {
        Parser* visible_parser = list_get(&parser->visible_parsers, i);
        FuncSymbol* imported_symbol = func_table_find(
            &visible_parser->func_table, symbol->ns, symbol->name);

        is_redefinition = imported_symbol != nullptr
            && imported_symbol->exported;
    }

    if(is_redefinition)
    {
        error_func_def_redefinition(parser_source_file(parser),
            func_def->range.start, symbol->name);

        parser->failed = true;
    }

    analyze_func_params(parser, func_def->params);

    analyze_scope(parser, func_def->body);
}
