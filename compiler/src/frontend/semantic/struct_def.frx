import "type_specifier.frx";
import "../core/errors.frx";
import "../core/parser.frx";
import "../symbols/struct.frx";
import "../ast/struct_def.frx";
import "../../core/list.frx";

void analyze_struct_field(Parser* parser, AST::StructField* field)
{
    frx::assert(parser != nullptr);

    frx::assert(field != nullptr);

    analyze_type_specifier(parser, field->type);
}

export void analyze_struct_def(mut Parser* parser, mut AST::StructDef* struct_def)
{
    frx::assert(parser != nullptr);

    frx::assert(struct_def != nullptr);

    StructSymbol* symbol = &struct_def->symbol;

    b8 is_redefinition = false;

    mut usize i;
    for(i = 0; i < list_size(&parser->visible_parsers)
        && !struct_def->is_redefinition; i = i + 1)
    {
        Parser* visible_parser = list_get(&parser->visible_parsers, i);
        StructSymbol* imported_symbol = struct_table_find(
            &visible_parser->struct_table, symbol->ns, symbol->name);

        struct_def->is_redefinition = imported_symbol != nullptr
            && imported_symbol->exported;
    }

    if(struct_def->is_redefinition)
    {
        error_struct_def_redefinition(parser_source_file(parser),
            struct_def->range.start, symbol->name);

        parser->failed = true;
    }

    for(i = 0; i < list_size(&symbol->fields); i = i + 1)
    {
        AST::StructField* field = list_get(&symbol->fields, i);
        analyze_struct_field(parser, field);
    }
}
