import "std/libc.frx";
import "../core/namespace.frx";
import "../core/scope.frx";
import "../core/token.frx";
import "../ast/enum_def.frx";
import "../../core/hash.frx";
export import "../../core/list.frx";

export struct EnumSymbol
{
    TokenType type;
    CoreScope* scope;
    CoreNamespace* ns;
    char* name;
    List constants;
    b8 exported;
}

export void enum_symbol_init(mut EnumSymbol* symbol, TokenType type,
    CoreScope* scope, CoreNamespace* ns, char* name, b8 exported)
{
    frx::assert(symbol != nullptr);

    frx::assert(type != TokenType::EOF && type < TokenType::COUNT);

    frx::assert(scope != nullptr);

    frx::assert(name != nullptr);

    symbol->type = type;
    symbol->scope = scope;
    symbol->ns = ns;
    symbol->name = name;
    list_init(&symbol->constants);
    symbol->exported = exported;
}

export b8 enum_symbol_has_constant(EnumSymbol* symbol, char* name)
{
    frx::assert(symbol != nullptr);

    frx::assert(name != nullptr);

    mut usize i;
    for(i = 0; i < list_size(&symbol->constants); i = i + 1)
    {
        EnumConstantDef* constant = list_get(&symbol->constants, i);
        if(libc_strcmp(constant->name, name) == 0)
        {
            return true;
        }
    }

    return false;
}
