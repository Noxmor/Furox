export struct EnumSymbol
{
    TokenType type;
    Namespace* ns;
    char* name;
    List constants;
    Scope* scope;
    b8 exported;
}

export void enum_symbol_init(EnumSymbol* symbol, TokenType type, Namespace* ns,
    char* name, Scope* scope, b8 exported)
{
    assert(symbol != nullptr);

    assert(type != TOKEN_TYPE_ERROR && type < TOKEN_TYPE_COUNT);

    assert(name != nullptr);

    assert(scope != nullptr);

    symbol->type = type;
    symbol->ns = ns;
    symbol->name = name;
    list_init(&symbol->constants);
    symbol->scope = scope;
    symbol->exported = exported;
}

struct EnumTableEntry
{
    EnumSymbol* symbol;
    EnumTableEntry* next;
}

macro ENUM_TABLE_CAPACITY = 128;

struct EnumTable
{
    EnumTableEntry*[ENUM_TABLE_CAPACITY] entries;
}

EnumTable enum_table;

export EnumSymbol* enum_table_find_r(Namespace* ns, char* name, Scope* scope)
{
    EnumSymbol* symbol = enum_table_find(ns, name, scope);
    while(symbol == nullptr && ns != nullptr)
    {
        ns = ns->parent;
        symbol = enum_table_find(ns, name, scope);
    }

    return symbol;
}

export EnumSymbol* enum_table_find(Namespace* ns, char* name, Scope* scope)
{
    assert(name != nullptr);

    assert(scope != nullptr);

    u64 index = hash_djb2(name) % ENUM_TABLE_CAPACITY;
    EnumTableEntry* entry = enum_table.entries[index];

    while(entry != nullptr)
    {
        EnumSymbol* symbol = entry->symbol;

        b8 visible = scope_same_root(symbol->scope, scope) || symbol->exported;

        if(strcmp(symbol->name, name) == 0 && namespace_equals(symbol->ns, ns)
            && visible)
        {
            return symbol;
        }

        entry = entry->next;
    }

    return nullptr;
}

export b8 enum_table_insert(EnumSymbol* symbol)
{
    assert(symbol != nullptr);

    u64 index = hash_djb2(symbol->name) % ENUM_TABLE_CAPACITY;
    EnumTableEntry* entry = enum_table.entries[index];

    while(entry != nullptr)
    {
        EnumSymbol* existing_symbol = entry->symbol;

        if(strcmp(existing_symbol->name, symbol->name) == 0
            && namespace_equals(existing_symbol->ns, symbol->ns))
        {
            return false;
        }

        entry = entry->next;
    }

    EnumTableEntry* new_entry = malloc(sizeof(EnumTableEntry));
    new_entry->symbol = symbol;
    new_entry->next = enum_table.entries[index];

    enum_table.entries[index] = new_entry;

    return true;
}
