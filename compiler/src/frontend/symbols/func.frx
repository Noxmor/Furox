export struct FuncSymbol
{
    Namespace* ns;
    char* name;
}

export void func_symbol_init(FuncSymbol* symbol, Namespace* ns, char* name)
{
    assert(symbol != nullptr);

    assert(name != nullptr);

    symbol->ns = ns;
    symbol->name = name;
}

struct FuncTableEntry
{
    FuncSymbol* symbol;
    FuncTableEntry* next;
}

macro FUNC_TABLE_CAPACITY = 128;

struct FuncTable
{
    FuncTableEntry*[FUNC_TABLE_CAPACITY] entries;
}

FuncTable func_table;

export FuncSymbol* func_table_find_r(Namespace* ns, char* name)
{
    FuncSymbol* symbol = func_table_find(ns, name);
    while(symbol == nullptr && ns != nullptr)
    {
        ns = ns->parent;
        symbol = func_table_find(ns, name);
    }

    return symbol;
}

export FuncSymbol* func_table_find(Namespace* ns, char* name)
{
    assert(name != nullptr);

    u64 index = hash_djb2(name) % FUNC_TABLE_CAPACITY;
    FuncTableEntry* entry = func_table.entries[index];

    while(entry != nullptr)
    {
        FuncSymbol* symbol = entry->symbol;

        if(strcmp(symbol->name, name) == 0 && namespace_equals(symbol->ns, ns))
        {
            return symbol;
        }

        entry = entry->next;
    }

    return nullptr;
}

export b8 func_table_insert(FuncSymbol* symbol)
{
    assert(symbol != nullptr);

    u64 index = hash_djb2(symbol->name) % FUNC_TABLE_CAPACITY;
    FuncTableEntry* entry = func_table.entries[index];

    while(entry != nullptr)
    {
        FuncSymbol* existing_symbol = entry->symbol;

        if(strcmp(existing_symbol->name, symbol->name) == 0
            && namespace_equals(existing_symbol->ns, symbol->ns))
        {
            return false;
        }

        entry = entry->next;
    }

    FuncTableEntry* new_entry = malloc(sizeof(FuncTableEntry));
    new_entry->symbol = symbol;
    new_entry->next = func_table.entries[index];

    func_table.entries[index] = new_entry;

    return true;
}
