import "std/libc.frx";
import "../core/namespace.frx";
import "../core/scope.frx";
import "../../core/hash.frx";

export struct MacroSymbol
{
    Scope* scope;
    Namespace* ns;
    char* name;
    AST* value;
    b8 exported;
}

export void macro_symbol_init(mut MacroSymbol* symbol, Scope* scope,
    Namespace* ns, char* name, AST* value, b8 exported)
{
    frx::assert(symbol != nullptr);

    frx::assert(scope != nullptr);

    frx::assert(name != nullptr);

    frx::assert(value != nullptr);

    symbol->scope = scope;
    symbol->ns = ns;
    symbol->name = name;
    symbol->value = value;
    symbol->exported = exported;
}

struct MacroTableEntry
{
    MacroSymbol* symbol;
    MacroTableEntry* next;
}

enum Constants : u64
{
    MACRO_TABLE_CAPACITY = 128
}

export struct MacroTable
{
    MacroTableEntry* entries[Constants::MACRO_TABLE_CAPACITY];
}

export void macro_table_init(MacroTable* table)
{
    frx::assert(table != nullptr);

    libc::memset(table, 0, frx::sizeof(MacroTable));
}

export MacroSymbol* macro_table_find_r(MacroTable* table, Namespace* ns,
    char* name)
{
    MacroSymbol* symbol = macro_table_find(table, ns, name);
    while(symbol == nullptr && ns != nullptr)
    {
        ns = ns->parent;
        symbol = macro_table_find(table, ns, name);
    }

    return symbol;
}

export MacroSymbol* macro_table_find(MacroTable* table, Namespace* ns,
    char* name)
{
    frx::assert(table != nullptr);

    frx::assert(name != nullptr);

    u64 index = hash_djb2(name) % Constants::MACRO_TABLE_CAPACITY;
    mut MacroTableEntry* entry = table->entries[index];

    while(entry != nullptr)
    {
        MacroSymbol* symbol = entry->symbol;

        if(libc::strcmp(symbol->name, name) == 0 && namespace_equals(symbol->ns, ns))
        {
            return symbol;
        }

        entry = entry->next;
    }

    return nullptr;
}

export b8 macro_table_insert(MacroTable* table, MacroSymbol* symbol)
{
    frx::assert(table != nullptr);

    frx::assert(symbol != nullptr);

    u64 index = hash_djb2(symbol->name) % Constants::MACRO_TABLE_CAPACITY;
    mut MacroTableEntry* entry = table->entries[index];

    while(entry != nullptr)
    {
        MacroSymbol* existing_symbol = entry->symbol;

        if(libc::strcmp(existing_symbol->name, symbol->name) == 0
            && namespace_equals(existing_symbol->ns, symbol->ns))
        {
            return false;
        }

        entry = entry->next;
    }

    mut MacroTableEntry* new_entry = libc::malloc(frx::sizeof(MacroTableEntry));
    new_entry->symbol = symbol;
    new_entry->next = table->entries[index];

    table->entries[index] = new_entry;

    return true;
}
