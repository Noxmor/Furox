export struct StructSymbol
{
    Namespace* ns;
    char* name;
    Scope* scope;
    b8 exported;
}

export void struct_symbol_init(StructSymbol* symbol, Namespace* ns, char* name,
    Scope* scope, b8 exported)
{
    assert(symbol != nullptr);

    assert(name != nullptr);

    assert(scope != nullptr);

    symbol->ns = ns;
    symbol->name = name;
    symbol->scope = scope;
    symbol->exported = exported;
}

struct StructTableEntry
{
    StructSymbol* symbol;
    StructTableEntry* next;
}

macro STRUCT_TABLE_CAPACITY = 128;

struct StructTable
{
    StructTableEntry*[STRUCT_TABLE_CAPACITY] entries;
}

StructTable struct_table;

export StructSymbol* struct_table_find_r(Namespace* ns, char* name,
    Scope* scope)
{
    StructSymbol* symbol = struct_table_find(ns, name, scope);
    while(symbol == nullptr && ns != nullptr)
    {
        ns = ns->parent;
        symbol = struct_table_find(ns, name, scope);
    }

    return symbol;
}

export StructSymbol* struct_table_find(Namespace* ns, char* name, Scope* scope)
{
    assert(name != nullptr);

    assert(scope != nullptr);

    u64 index = hash_djb2(name) % STRUCT_TABLE_CAPACITY;
    StructTableEntry* entry = struct_table.entries[index];

    while(entry != nullptr)
    {
        StructSymbol* symbol = entry->symbol;

        b8 visible = scope_same_root(symbol->scope, scope) || symbol->exported;

        if(strcmp(symbol->name, name) == 0 && namespace_equals(symbol->ns, ns)
            && visible)
        {
            return symbol;
        }

        entry = entry->next;
    }

    return nullptr;
}

export b8 struct_table_insert(StructSymbol* symbol)
{
    assert(symbol != nullptr);

    u64 index = hash_djb2(symbol->name) % STRUCT_TABLE_CAPACITY;
    StructTableEntry* entry = struct_table.entries[index];

    while(entry != nullptr)
    {
        StructSymbol* existing_symbol = entry->symbol;

        if(strcmp(existing_symbol->name, symbol->name) == 0
            && namespace_equals(existing_symbol->ns, symbol->ns))
        {
            return false;
        }

        entry = entry->next;
    }

    StructTableEntry* new_entry = malloc(sizeof(StructTableEntry));
    new_entry->symbol = symbol;
    new_entry->next = struct_table.entries[index];

    struct_table.entries[index] = new_entry;

    return true;
}
