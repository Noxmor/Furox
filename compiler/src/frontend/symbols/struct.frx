export struct StructSymbol
{
    Scope* scope;
    Namespace* ns;
    char* name;
    b8 exported;
}

export void struct_symbol_init(StructSymbol* symbol, Scope* scope,
    Namespace* ns, char* name, b8 exported)
{
    assert(symbol != nullptr);

    assert(scope != nullptr);

    assert(name != nullptr);

    symbol->scope = scope;
    symbol->ns = ns;
    symbol->name = name;
    symbol->exported = exported;
}

struct StructTableEntry
{
    StructSymbol* symbol;
    StructTableEntry* next;
}

macro STRUCT_TABLE_CAPACITY = 128;

export struct StructTable
{
    StructTableEntry*[STRUCT_TABLE_CAPACITY] entries;
}

export void struct_table_init(StructTable* table)
{
    assert(table != nullptr);

    memset(table, 0, sizeof(StructTable));
}

export StructSymbol* struct_table_find_r(StructTable* table, Namespace* ns,
    char* name)
{
    StructSymbol* symbol = struct_table_find(table, ns, name);
    while(symbol == nullptr && ns != nullptr)
    {
        ns = ns->parent;
        symbol = struct_table_find(table, ns, name);
    }

    return symbol;
}

export StructSymbol* struct_table_find(StructTable* table, Namespace* ns,
    char* name)
{
    assert(table != nullptr);

    assert(name != nullptr);

    u64 index = hash_djb2(name) % STRUCT_TABLE_CAPACITY;
    StructTableEntry* entry = table->entries[index];

    while(entry != nullptr)
    {
        StructSymbol* symbol = entry->symbol;

        if(strcmp(symbol->name, name) == 0 && namespace_equals(symbol->ns, ns))
        {
            return symbol;
        }

        entry = entry->next;
    }

    return nullptr;
}

export b8 struct_table_insert(StructTable* table, StructSymbol* symbol)
{
    assert(table != nullptr);

    assert(symbol != nullptr);

    u64 index = hash_djb2(symbol->name) % STRUCT_TABLE_CAPACITY;
    StructTableEntry* entry = table->entries[index];

    while(entry != nullptr)
    {
        StructSymbol* existing_symbol = entry->symbol;

        if(strcmp(existing_symbol->name, symbol->name) == 0
            && namespace_equals(existing_symbol->ns, symbol->ns))
        {
            return false;
        }

        entry = entry->next;
    }

    StructTableEntry* new_entry = malloc(sizeof(StructTableEntry));
    new_entry->symbol = symbol;
    new_entry->next = table->entries[index];

    table->entries[index] = new_entry;

    return true;
}
