import "../core/namespace.frx";
import "../core/scope.frx";
import "../syntax/type_specifier.frx";

export struct VarSymbol
{
    Namespace* ns;
    ASTTypeSpecifier* type;
    Scope* scope;
    char* name;
    b8 global;
    b8 mutable;
}

export void var_symbol_init(VarSymbol* symbol, Namespace* ns,
    ASTTypeSpecifier* type, Scope* scope, char* name, b8 global, b8 mutable)
{
    assert(symbol != nullptr);

    assert(type != nullptr);

    assert(scope != nullptr);

    assert(name != nullptr);

    symbol->ns = ns;
    symbol->type = type;
    symbol->scope = scope;
    symbol->name = name;
    symbol->global = global;
    symbol->mutable = mutable;
}

struct VarTableEntry
{
    VarSymbol* symbol;
    VarTableEntry* next;
}

macro VAR_TABLE_CAPACITY = 128;

struct VarTable
{
    VarTableEntry*[VAR_TABLE_CAPACITY] entries;
}

export void var_table_init(VarTable* table)
{
    assert(table != nullptr);

    memset(table, 0, sizeof(VarTable));
}

export VarSymbol* var_table_find_by_namespace(VarTable* table, Namespace* ns,
    char* name)
{
    assert(table != nullptr);

    assert(name != nullptr);

    u64 index = hash_djb2(name) % VAR_TABLE_CAPACITY;
    VarTableEntry* entry = table->entries[index];

    while(entry != nullptr)
    {
        VarSymbol* symbol = entry->symbol;

        if(strcmp(symbol->name, name) == 0 && namespace_equals(symbol->ns, ns))
        {
            return symbol;
        }

        entry = entry->next;
    }

    return nullptr;
}

export VarSymbol* var_table_find_by_scope(VarTable* table, Scope* scope,
    char* name)
{
    assert(table != nullptr);

    assert(scope != nullptr);

    assert(name != nullptr);

    u64 index = hash_djb2(name) % VAR_TABLE_CAPACITY;
    VarTableEntry* entry = table->entries[index];

    while(entry != nullptr)
    {
        VarSymbol* symbol = entry->symbol;

        if(strcmp(symbol->name, name) == 0
            && scope_is_child_of(scope, symbol->scope))
        {
            return symbol;
        }

        entry = entry->next;
    }

    return nullptr;
}

export b8 var_table_insert(VarTable* table, VarSymbol* symbol)
{
    assert(table != nullptr);

    assert(symbol != nullptr);

    u64 index = hash_djb2(symbol->name) % VAR_TABLE_CAPACITY;
    VarTableEntry* entry = table->entries[index];

    while(entry != nullptr)
    {
        VarSymbol* existing_symbol = entry->symbol;

        if(strcmp(existing_symbol->name, symbol->name) == 0
            && scope_is_child_of(symbol->scope, existing_symbol->scope))
        {
            return false;
        }

        entry = entry->next;
    }

    VarTableEntry* new_entry = malloc(sizeof(VarTableEntry));
    new_entry->symbol = symbol;
    new_entry->next = table->entries[index];

    table->entries[index] = new_entry;

    return true;
}
