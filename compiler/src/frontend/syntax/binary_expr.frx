import "../core/ast.frx";
import "../core/parser.frx";

export struct ASTBinaryExpr
{
    TokenType operator;
    Precedence precedence;

    AST* left;
    AST* right;
}

export ASTBinaryExpr* make_binary_expr(Arena* arena, TokenType operator,
    AST* left, AST* right)
{
    assert(arena != nullptr);

    assert(operator < TOKEN_TYPE_COUNT);

    assert(token_type_is_binary_operator(operator));

    assert(left != nullptr);

    assert(right != nullptr);

    ASTBinaryExpr* expr = arena_alloc(arena, sizeof(ASTBinaryExpr));

    expr->operator = operator;
    expr->precedence = token_type_to_binary_operator_precedence(operator);
    expr->left = left;
    expr->right = right;

    return expr;
}

export void print_binary_expr(ASTBinaryExpr* expr, FILE* file, usize depth)
{
    assert(expr != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_BINARY_EXPR),
        token_type_to_str(expr->operator));

    print_ast(expr->left, file, depth + 1);
    print_ast(expr->right, file, depth + 1);
}
