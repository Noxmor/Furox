import "../core/ast.frx";
import "../core/parser.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTBinaryExpr
{
    TokenType type;
    Operator operator;

    AST* left;
    AST* right;
}

export ASTBinaryExpr* make_binary_expr(Arena* arena, TokenType type,
    Operator operator, AST* left, AST* right)
{
    frx::assert(arena != nullptr);

    frx::assert(token_type_is_infix_operator(type));

    frx::assert(operator != Operator::INVALID && operator < Operator::COUNT);

    frx::assert(left != nullptr);

    frx::assert(right != nullptr);

    mut ASTBinaryExpr* expr = arena_alloc(arena, frx::sizeof(ASTBinaryExpr));

    expr->type = type;
    expr->operator = operator;
    expr->left = left;
    expr->right = right;

    return expr;
}

export void print_binary_expr(ASTBinaryExpr* expr, FILE* file, usize depth)
{
    frx::assert(expr != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AstType::BINARY_EXPR),
        token_type_to_str(expr->type));

    print_ast(expr->left, file, depth + 1);
    print_ast(expr->right, file, depth + 1);
}
