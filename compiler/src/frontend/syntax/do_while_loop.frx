import "expr.frx";
import "scope.frx";
import "../core/ast.frx";
import "../core/parser.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTDoWhileLoop
{
    ASTScope* scope;
    AST* condition;
}

ASTDoWhileLoop* make_do_while_loop(Arena* arena, ASTScope* scope,
    AST* condition)
{
    frx::assert(scope != nullptr);

    frx::assert(condition != nullptr);

    mut ASTDoWhileLoop* do_while_loop = arena_alloc(arena,
        frx::sizeof(ASTDoWhileLoop));

    do_while_loop->scope = scope;
    do_while_loop->condition = condition;

    return do_while_loop;
}

export ASTDoWhileLoop* parse_do_while_loop(Parser* parser)
{
    frx::assert(parser != nullptr);

    parser_eat(parser, TokenType::KW_DO);

    ASTScope* scope = parse_scope(parser);

    parser_eat(parser, TokenType::KW_WHILE);
    parser_eat(parser, TokenType::LPAREN);
    AST* condition = parse_expr(parser);
    parser_eat(parser, TokenType::RPAREN);
    parser_eat(parser, TokenType::SEMICOLON);

    return make_do_while_loop(&parser->arena, scope, condition);
}

export void print_do_while_loop(ASTDoWhileLoop* do_while_loop, FILE* file,
    usize depth)
{
    frx::assert(do_while_loop != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s\n", ast_type_to_str(AstType::DO_WHILE_LOOP));
    print_scope(do_while_loop->scope, file, depth + 1);
    print_ast(do_while_loop->condition, file, depth + 1);
}
