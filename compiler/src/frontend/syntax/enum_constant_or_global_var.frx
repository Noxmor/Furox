import "../core/parser.frx";

export struct ASTEnumConstantOrGlobalVar
{
    Namespace* ns;
    char* name;
    Scope* scope;
}

ASTEnumConstantOrGlobalVar* make_enum_constant_or_global_var(
    Arena* arena, Namespace* ns, char* name, Scope* scope)
{
    assert(ns != nullptr);

    assert(name != nullptr);

    ASTEnumConstantOrGlobalVar* enum_constant_or_global_var = arena_alloc(arena,
        sizeof(ASTEnumConstantOrGlobalVar));

    enum_constant_or_global_var->ns = ns;
    enum_constant_or_global_var->name = name;
    enum_constant_or_global_var->scope = scope;

    return enum_constant_or_global_var;
}

export ASTEnumConstantOrGlobalVar* parse_enum_constant_or_global_var(
    Parser* parser, Namespace* ns)
{
    assert(parser != nullptr);

    char* name = parser->token->identifier;
    Scope* scope = parser->current_scope;

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    return make_enum_constant_or_global_var(&parser->arena, ns, name, scope);
}

export void print_enum_constant_or_global_var(
    ASTEnumConstantOrGlobalVar* enum_constant_or_global_var, FILE* file,
    usize depth)
{
    assert(enum_constant_or_global_var != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (",
        ast_type_to_str(AST_TYPE_ENUM_CONSTANT_OR_GLOBAL_VAR));

    print_namespace_resolution(file, enum_constant_or_global_var->ns);

    fprintf(file, "%s)\n", enum_constant_or_global_var->name);
}
