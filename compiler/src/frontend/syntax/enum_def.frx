import "../ast/enum_def.frx";
import "../ast/binary_expr.frx";
import "expr.frx";
import "int_literal.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/enum.frx";
import "../../core/list.frx";
import "../../core/symbol_table.frx";

EnumConstantDef* enum_constant_def_parse(Parser* parser)
{
    frx::assert(parser != nullptr);

    char* name = parser->token->identifier;

    parser_eat(parser, TokenType::IDENTIFIER);

    mut Expr* value = nullptr;
    if(parser->token->type == TokenType::EQ)
    {
        parser_eat(parser, TokenType::EQ);

        value = expr_parse(parser);
    }

    return enum_constant_def_new(&parser->arena, name, value);
}

export EnumDef* enum_def_parse(Parser* parser, b8 exported)
{
    frx::assert(parser != nullptr);

    SourceLocation start = parser_current_location(parser);

    parser_eat(parser, TokenType::KW_ENUM);

    char* name = parser->token->identifier;

    parser_eat(parser, TokenType::IDENTIFIER);

    parser_eat(parser, TokenType::COLON);

    mut TokenType type = TokenType::EOF;

    switch(parser->token->type)
    {
        case TokenType::KW_I8:
            {

            }
        case TokenType::KW_I16:
            {

            }
        case TokenType::KW_I32:
            {

            }
        case TokenType::KW_I64:
            {

            }
        case TokenType::KW_U8:
            {

            }
        case TokenType::KW_U16:
            {

            }
        case TokenType::KW_U32:
            {

            }
        case TokenType::KW_U64:
            {
                type = parser->token->type;

                parser_eat(parser, parser->token->type);

                break;
            }
        default:
            {
                parser_panic(parser);

                break;
            }
    }

    mut EnumDef* enum_def = enum_def_new(&parser->arena,
            parser->current_scope, nullptr, name, type, exported);

    EnumSymbol* symbol = &enum_def->symbol;
    symbol_table_insert(&parser->module->symbol_table, SymbolType::ENUM, symbol->name, symbol->exported, symbol);

    parser_eat(parser, TokenType::LBRACE);

    while(parser_loop_until(parser, TokenType::RBRACE))
    {
        EnumConstantDef* constant = enum_constant_def_parse(parser);

        enum_def_add_constant(&parser->arena, enum_def, constant);

        if(parser->token->type == TokenType::COMMA)
        {
            parser_eat(parser, TokenType::COMMA);
        }
        else
        {
            break;
        }
    }

    enum_def->range.start = start;
    enum_def->range.end = parser_current_location(parser);

    parser_eat(parser, TokenType::RBRACE);

    return enum_def;
}
