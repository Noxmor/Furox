import "../core/parser.frx";

export struct ASTFloatLiteral
{
    u64 value;
}

ASTFloatLiteral* make_float_literal(Arena* arena, f64 value)
{
    ASTFloatLiteral* literal = arena_alloc(arena, sizeof(ASTFloatLiteral));

    literal->value = value;

    return literal;
}

export ASTFloatLiteral* parse_float_literal(Parser* parser)
{
    assert(parser != nullptr);

    ASTFloatLiteral* literal = make_float_literal(&parser->arena,
        parser->token->float_literal);

    parser_eat(parser, TOKEN_TYPE_FLOAT_LITERAL);

    return literal;
}

export void print_float_literal(ASTFloatLiteral* literal, FILE* file,
    usize depth)
{
    assert(literal != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    u64 integer = literal->value >> 32;
    u64 decimal = literal->value & 0xFFFFFFFF;

    fprintf(file, "%s (%zu.%zuf)\n", ast_type_to_str(AST_TYPE_FLOAT_LITERAL),
        integer, decimal);
}
