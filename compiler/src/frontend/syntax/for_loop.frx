import "expr.frx";
import "scope.frx";
import "../core/ast.frx";
import "../core/parser.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTForLoop
{
    AST* initialization;
    AST* condition;
    AST* iteration;
    ASTScope* scope;
}

ASTForLoop* make_for_loop(Arena* arena, AST* initialization, AST* condition,
    AST* iteration, ASTScope* scope)
{
    frx::assert(initialization != nullptr);

    frx::assert(condition != nullptr);

    frx::assert(iteration != nullptr);

    frx::assert(scope != nullptr);

    mut ASTForLoop* for_loop = arena_alloc(arena, frx::sizeof(ASTForLoop));

    for_loop->initialization = initialization;
    for_loop->condition = condition;
    for_loop->iteration = iteration;
    for_loop->scope = scope;

    return for_loop;
}

export ASTForLoop* parse_for_loop(Parser* parser)
{
    frx::assert(parser != nullptr);

    parser_eat(parser, TokenType::KW_FOR);

    parser_eat(parser, TokenType::LPAREN);

    AST* initialization = parse_expr(parser);
    parser_eat(parser, TokenType::SEMICOLON);
    AST* condition = parse_expr(parser);
    parser_eat(parser, TokenType::SEMICOLON);
    AST* iteration = parse_expr(parser);

    parser_eat(parser, TokenType::RPAREN);

    ASTScope* scope = parse_scope(parser);

    return make_for_loop(&parser->arena, initialization, condition, iteration,
        scope);
}

export void print_for_loop(ASTForLoop* for_loop, FILE* file, usize depth)
{
    frx::assert(for_loop != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s\n", ast_type_to_str(AstType::FOR_LOOP));

    print_ast(for_loop->initialization, file, depth + 1);
    print_ast(for_loop->condition, file, depth + 1);
    print_ast(for_loop->iteration, file, depth + 1);
}
