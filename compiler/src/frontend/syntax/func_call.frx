export import "../ast/func_call.frx";
import "expr.frx";
import "namespace_resolution.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/func.frx";
import "../../core/list.frx";

namespace AST::FuncCall
{
    export FuncCall* parse(Parser* parser, Namespace* ns)
    {
        frx::assert(parser != nullptr);

        char* name = parser->token->identifier;

        Parser::eat(parser, TokenType::IDENTIFIER);

        FuncCall* func_call = new(&parser->arena, ns, name, parser->current_scope);

        Parser::eat(parser, TokenType::LPAREN);

        while(Parser::loop_until(parser, TokenType::RPAREN))
        {
            if(list_size(&func_call->args) > 0)
            {
                Parser::eat(parser, TokenType::COMMA);
            }

            Expr* arg = AST::Expr::parse(parser);
            list_push(&func_call->args, arg);
        }

        Parser::eat(parser, TokenType::RPAREN);

        return func_call;
    }
}
