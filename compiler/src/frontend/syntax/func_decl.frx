export import "../ast/func_decl.frx";
import "func_params.frx";
import "type_specifier.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/func.frx";

export FuncDecl* func_decl_parse(Parser* parser)
{
    frx::assert(parser != nullptr);

    SourceLocation start = parser_current_location(parser);

    TypeSpecifier* return_type = type_specifier_parse(parser);

    char* name = parser->token->identifier;

    parser_eat(parser, TokenType::IDENTIFIER);

    mut FuncDecl* func_decl = func_decl_new(&parser->arena, parser->current_scope,
            nullptr, name, return_type);

    func_decl->is_redefinition = !func_table_insert(&parser->func_table,
            &func_decl->symbol);

    parser_push_scope(parser);

    func_decl->params = func_params_parse(parser);

    parser_pop_scope(parser);

    func_decl->range.start = start;
    func_decl->range.end = parser_current_location(parser);

    parser_eat(parser, TokenType::SEMICOLON);

    return func_decl;
}
