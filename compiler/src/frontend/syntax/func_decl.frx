export import "../ast/func_decl.frx";
import "func_params.frx";
import "type_specifier.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/func.frx";

namespace AST::FuncDecl
{
    export FuncDecl* parse(Parser* parser)
    {
        frx::assert(parser != nullptr);

        SourceLocation start = Parser::current_location(parser);

        TypeSpecifier* return_type = AST::TypeSpecifier::parse(parser);

        char* name = parser->token->identifier;

        Parser::eat(parser, TokenType::IDENTIFIER);

        mut FuncDecl* func_decl = new(&parser->arena, parser->current_scope,
            parser->current_namespace, name, return_type);

        func_decl->is_redefinition = !func_table_insert(&parser->func_table,
            &func_decl->symbol);

        Parser::push_scope(parser);

        func_decl->params = AST::FuncParams::parse(parser);

        Parser::pop_scope(parser);

        func_decl->range.start = start;
        func_decl->range.end = Parser::current_location(parser);

        Parser::eat(parser, TokenType::SEMICOLON);

        return func_decl;
    }
}
