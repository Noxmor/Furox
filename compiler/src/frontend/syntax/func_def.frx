export struct ASTFuncDef
{
    FuncSymbol* symbol;

    ASTTypeSpecifier* return_type;
    char* name;
    ASTFuncParams* params;
    ASTScope* body;
    b8 exported;
}

export ASTFuncDef* make_func_def(Arena* arena, Namespace* ns, char* name,
    ASTTypeSpecifier* return_type, b8 exported)
{
    assert(name != nullptr);

    assert(return_type != nullptr);

    ASTFuncDef* func_def = arena_alloc(arena, sizeof(ASTFuncDef));

    func_def->symbol = func_table_insert(ns, name, return_type);

    func_def->return_type = return_type;
    func_def->name = name;
    func_def->params = nullptr;
    func_def->body = nullptr;
    func_def->exported = exported;

    return func_def;
}

export ASTFuncDef* parse_func_def(Parser* parser, ASTTypeSpecifier* return_type,
    b8 exported)
{
    assert(parser != nullptr);

    ASTFuncDef* func_def = make_func_def(&parser->arena,
        parser->current_namespace, parser->token->identifier, return_type,
        exported);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    func_def->params = parse_func_params(parser);

    func_def->body = parse_scope(parser);

    return func_def;
}

export void print_func_def(ASTFuncDef* func_def, FILE* file, usize depth)
{
    assert(func_def != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    FuncSymbol* symbol = func_def->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_FUNC_DEF),
        symbol->name);

    print_type_specifier(symbol->return_type, file, depth + 1);
    print_func_params(func_def->params, file, depth + 1);
    print_scope(func_def->body, file, depth + 1);
}
