export struct ASTFuncDef
{
    ASTTypeSpecifier* return_type;
    FuncSymbol symbol;
    ASTFuncParams* params;
    ASTScope* body;

    b8 is_redefinition;
}

export ASTFuncDef* make_func_def(Arena* arena, Namespace* ns, char* name,
    ASTTypeSpecifier* return_type, Scope* scope, b8 exported)
{
    assert(return_type != nullptr);

    ASTFuncDef* func_def = arena_alloc(arena, sizeof(ASTFuncDef));

    func_def->return_type = return_type;
    func_symbol_init(&func_def->symbol, ns, name, scope, exported);
    func_def->params = nullptr;
    func_def->body = nullptr;

    func_def->is_redefinition = !func_table_insert(&func_def->symbol);

    return func_def;
}

export ASTFuncDef* parse_func_def(Parser* parser, ASTTypeSpecifier* return_type,
    b8 exported)
{
    assert(parser != nullptr);

    ASTFuncDef* func_def = make_func_def(&parser->arena,
        parser->current_namespace, parser->token->identifier, return_type,
        parser->current_scope, exported);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_push_scope(parser);

    func_def->params = parse_func_params(parser);

    func_def->body = parse_scope(parser);

    parser_pop_scope(parser);

    return func_def;
}

export void print_func_def(ASTFuncDef* func_def, FILE* file, usize depth)
{
    assert(func_def != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_FUNC_DEF),
        func_def->symbol.name);

    print_type_specifier(func_def->return_type, file, depth + 1);
    print_func_params(func_def->params, file, depth + 1);
    print_scope(func_def->body, file, depth + 1);
}
