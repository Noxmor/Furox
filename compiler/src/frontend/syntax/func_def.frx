export import "../ast/func_def.frx";
import "func_params.frx";
import "scope.frx";
import "type_specifier.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/func.frx";

namespace AST::FuncDef
{
    export FuncDef* parse(Parser* parser, TypeSpecifier* return_type, b8 exported)
    {
        frx::assert(parser != nullptr);

        char* name = parser->token->identifier;

        mut FuncDef* func_def = AST::FuncDef::new(&parser->arena,
            parser->current_scope, parser->current_namespace, name, return_type,
            exported);

        func_def->is_redefinition = !func_table_insert(&parser->func_table,
            &func_def->symbol);

        Parser::eat(parser, TokenType::IDENTIFIER);

        Parser::push_scope(parser);

        func_def->params = AST::FuncParams::parse(parser);

        func_def->body = AST::Scope::parse(parser);

        Parser::pop_scope(parser);

        func_def->range.start = return_type->range.start;
        func_def->range.end = func_def->body->range.end;

        return func_def;
    }
}
