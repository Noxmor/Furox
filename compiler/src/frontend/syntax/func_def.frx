export import "../ast/func_def.frx";
import "func_params.frx";
import "scope.frx";
import "type_specifier.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/func.frx";
import "../../core/symbol_table.frx";

export FuncDef* func_def_parse(Parser* parser, TypeSpecifier* return_type, b8 exported)
{
    frx::assert(parser != nullptr);

    char* name = parser->token->identifier;

    mut FuncDef* func_def = func_def_new(&parser->arena,
            parser->current_scope, nullptr, name, return_type,
            exported);

    FuncSymbol* symbol = &func_def->symbol;
    symbol_table_insert(&parser->module->symbol_table, SymbolType::FUNC, symbol->name, symbol->exported, symbol);

    parser_eat(parser, TokenType::IDENTIFIER);

    parser_push_scope(parser);

    func_def->params = func_params_parse(parser);

    func_def->body = scope_parse(parser);

    parser_pop_scope(parser);

    func_def->range.start = return_type->range.start;
    func_def->range.end = func_def->body->range.end;

    return func_def;
}
