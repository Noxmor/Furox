export struct ASTGlobalVarDecl
{
    VarSymbol* symbol;

    Namespace* ns;

    ASTTypeSpecifier* type;
    Scope* scope;
    char* name;
}

export ASTGlobalVarDecl* make_global_var_decl(Arena* arena, Namespace* ns,
    ASTTypeSpecifier* type, Scope* scope, char* name)
{
    assert(type != nullptr);

    assert(name != nullptr);

    ASTGlobalVarDecl* var_decl = arena_alloc(arena, sizeof(ASTGlobalVarDecl));

    var_decl->symbol = var_table_insert(type, scope, name);

    var_decl->ns = ns;
    var_decl->type = type;
    var_decl->scope = scope;
    var_decl->name = name;

    return var_decl;
}

export ASTGlobalVarDecl* parse_global_var_decl(Parser* parser, ASTTypeSpecifier* type)
{
    assert(parser != nullptr);

    ASTGlobalVarDecl* var_decl = make_global_var_decl(&parser->arena,
        parser->current_namespace, type, parser->current_scope,
        parser->token->identifier);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_SEMICOLON);

    return var_decl;
}

export void print_global_var_decl(ASTGlobalVarDecl* var_decl, FILE* file, usize depth)
{
    assert(var_decl != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_GLOBAL_VAR_DECL),
        var_decl->name);

    print_type_specifier(var_decl->type, file, depth + 1);
}
