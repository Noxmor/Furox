export struct ASTGlobalVarDecl
{
    VarSymbol symbol;
}

export ASTGlobalVarDecl* make_global_var_decl(Arena* arena, Namespace* ns,
    ASTTypeSpecifier* type, Scope* scope, char* name, b8 mutable)
{
    ASTGlobalVarDecl* var_decl = arena_alloc(arena, sizeof(ASTGlobalVarDecl));


    var_symbol_init(&var_decl->symbol, ns, type, scope, name, mutable);

    return var_decl;
}

export ASTGlobalVarDecl* parse_global_var_decl(Parser* parser,
    ASTTypeSpecifier* type, b8 mutable)
{
    assert(parser != nullptr);

    ASTGlobalVarDecl* var_decl = make_global_var_decl(&parser->arena,
        parser->current_namespace, type, parser->current_scope,
        parser->token->identifier, mutable);

    var_table_insert(&parser->var_table, &var_decl->symbol);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_SEMICOLON);

    return var_decl;
}

export void print_global_var_decl(ASTGlobalVarDecl* var_decl, FILE* file,
    usize depth)
{
    assert(var_decl != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    VarSymbol* symbol = &var_decl->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_GLOBAL_VAR_DECL),
        symbol->name);

    print_type_specifier(symbol->type, file, depth + 1);
}
