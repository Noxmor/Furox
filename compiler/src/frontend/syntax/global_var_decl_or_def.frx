export import "../ast/global_scope.frx";
import "global_var_decl.frx";
import "global_var_def.frx";
import "type_specifier.frx";
import "../core/parser.frx";

namespace AST::GlobalVarDeclOrDef
{
    export GlobalScope* parse(Parser* parser, TypeSpecifier* type, b8 mutable)
    {
        frx::assert(parser != nullptr);

        frx::assert(type != nullptr);

        char* name = parser->token->identifier;

        parser_eat(parser, TokenType::IDENTIFIER);

        AST::TypeSpecifier::parse_array_dimensions(parser, type);

        mut GlobalScope* global_scope = nullptr;

        switch(parser->token->type)
        {
            case TokenType::SEMICOLON:
            {
                global_scope = AST::GlobalScope::from_global_var_decl(&parser->arena,
                    AST::GlobalVarDecl::parse(parser, type, name, mutable));

                break;
            }
            case TokenType::EQ:
            {
                global_scope = AST::GlobalScope::from_global_var_def(&parser->arena,
                    AST::GlobalVarDef::parse(parser, type, name, mutable));

                break;
            }
            default:
            {
                parser_panic(parser);

                break;
            }
        }

        return global_scope;
    }
}
