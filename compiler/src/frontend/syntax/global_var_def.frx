export struct ASTGlobalVarDef
{
    VarSymbol symbol;

    AST* value;

    b8 is_redefinition;
}

export ASTGlobalVarDef* make_global_var_def(Arena* arena, Namespace* ns,
    ASTTypeSpecifier* type, Scope* scope, char* name, b8 mutable)
{
    ASTGlobalVarDef* var_def = arena_alloc(arena, sizeof(ASTGlobalVarDef));

    var_symbol_init(&var_def->symbol, ns, type, scope, name, mutable);

    return var_def;
}

export ASTGlobalVarDef* parse_global_var_def(Parser* parser,
    ASTTypeSpecifier* type, b8 mutable)
{
    assert(parser != nullptr);

    ASTGlobalVarDef* var_def = make_global_var_def(&parser->arena,
        parser->current_namespace, type, parser->current_scope,
        parser->token->identifier, mutable);

    var_def->is_redefinition = !var_table_insert(&parser->var_table,
        &var_def->symbol);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_EQ);

    var_def->value = parse_expr(parser);

    parser_eat(parser, TOKEN_TYPE_SEMICOLON);

    return var_def;
}

export void print_global_var_def(ASTGlobalVarDef* var_def, FILE* file,
    usize depth)
{
    assert(var_def != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    VarSymbol* symbol = &var_def->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_GLOBAL_VAR_DEF),
        symbol->name);

    print_type_specifier(symbol->type, file, depth + 1);
    print_ast(var_def->value, file, depth + 1);
}
