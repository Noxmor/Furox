export import "../ast/global_var_def.frx";
import "expr.frx";
import "initializer_list.frx";
import "type_specifier.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/var.frx";

export GlobalVarDef* global_var_def_parse(Parser* parser, TypeSpecifier* type, char* name, b8 mutable)
{
    frx::assert(parser != nullptr);

    mut GlobalVarDef* var_def = global_var_def_new(&parser->arena, nullptr, type,
            parser->current_scope, name, mutable);

    var_table_insert(&parser->var_table, &var_def->symbol);

    parser_eat(parser, TokenType::EQ);

    if(parser->token->type == TokenType::LBRACE)
    {
        var_def->value = expr_from_initializer_list(&parser->arena,
                initializer_list_parse(parser));
    }
    else
    {
        var_def->value = expr_parse(parser);
    }

    parser_eat(parser, TokenType::SEMICOLON);

    return var_def;
}
