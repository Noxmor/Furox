export import "../ast/global_var_def.frx";
import "expr.frx";
import "initializer_list.frx";
import "type_specifier.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/var.frx";

namespace AST::GlobalVarDef
{
    export GlobalVarDef* parse(Parser* parser, TypeSpecifier* type, char* name, b8 mutable)
    {
        frx::assert(parser != nullptr);

        mut GlobalVarDef* var_def = new(&parser->arena, parser->current_namespace,
            type, parser->current_scope, name, mutable);

        var_table_insert(&parser->var_table, &var_def->symbol);

        Parser::eat(parser, TokenType::EQ);

        if(parser->token->type == TokenType::LBRACE)
        {
            var_def->value = AST::Expr::from_initializer_list(&parser->arena,
                AST::InitializerList::parse(parser));
        }
        else
        {
            var_def->value = AST::Expr::parse(parser);
        }

        Parser::eat(parser, TokenType::SEMICOLON);

        return var_def;
    }
}
