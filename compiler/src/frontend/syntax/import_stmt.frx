export import "../ast/import_stmt.frx";
import "std/libc.frx";
import "../core/parser.frx";
import "../core/string_table.frx";
import "../../core/config.frx";
import "../../core/main.frx";
import "module_path.frx";

extern struct FILE;

extern
{
    i32 sprintf(mut char* str, char* format, ...);
}

export ImportStmt* import_stmt_parse(Parser* parser, b8 exported)
{
    parser_eat(parser, TokenType::KW_IMPORT);

    ModulePath* module_path = module_path_parse(parser);
    mut Module* module = nullptr;

    if(module_path != nullptr)
    {
        module = module_find_submodule(parser->module, module_path);
        if(module != nullptr)
        {
            module_compile(module);
        }
        else
        {
            module = module_find_by_absolute_module_path(module_path);
            if(module != nullptr)
            {
                module_compile(module);
            }
            else
            {
                //TODO: Error, invalid module path!
            }
        }
    }

    char* symbol = parser->token->identifier;

    parser_eat(parser, TokenType::IDENTIFIER);
    parser_eat(parser, TokenType::SEMICOLON);

    ImportStmt* import_stmt = import_stmt_new(&parser->arena, module_path, symbol, module);

    if(module != nullptr)
    {
        list_push(&parser->import_stmts, import_stmt);
    }

    return import_stmt;
}
