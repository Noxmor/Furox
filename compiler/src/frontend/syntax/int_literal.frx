import "../core/ast.frx";
import "../core/parser.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTIntLiteral
{
    u64 value;
}

export ASTIntLiteral* make_int_literal(Arena* arena, u64 value)
{
    frx::assert(arena != nullptr);

    mut ASTIntLiteral* literal = arena_alloc(arena, frx::sizeof(ASTIntLiteral));

    literal->value = value;

    return literal;
}

export ASTIntLiteral* parse_int_literal(Parser* parser)
{
    frx::assert(parser != nullptr);

    ASTIntLiteral* literal = make_int_literal(&parser->arena,
        parser->token->int_literal);

    parser_eat(parser, TokenType::INT_LITERAL);

    return literal;
}

export void print_int_literal(ASTIntLiteral* literal, FILE* file, usize depth)
{
    frx::assert(literal != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%zu)\n", ast_type_to_str(AstType::INT_LITERAL),
        literal->value);
}
