import "../core/ast.frx";
import "../core/parser.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTStringLiteral
{
    char* literal;
}

ASTStringLiteral* make_string_literal(Arena* arena, char* literal)
{
    frx::assert(literal != nullptr);

    mut ASTStringLiteral* str_literal = arena_alloc(arena,
        frx::sizeof(ASTStringLiteral));

    str_literal->literal = literal;

    return str_literal;
}

export ASTStringLiteral* parse_string_literal(Parser* parser)
{
    frx::assert(parser != nullptr);

    char* literal = parser->token->identifier;

    parser_eat(parser, TokenType::STRING_LITERAL);

    return make_string_literal(&parser->arena, literal);
}

export void print_string_literal(ASTStringLiteral* str_literal, FILE* file,
    usize depth)
{
    frx::assert(str_literal != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AstType::STRING_LITERAL),
        str_literal->literal);
}
