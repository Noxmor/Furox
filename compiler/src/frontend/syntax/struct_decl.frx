import "../core/ast.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/struct.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTStructDecl
{
    SourceRange range;

    StructSymbol symbol;

    b8 is_redefinition;
}

export ASTStructDecl* make_struct_decl(Arena* arena, Scope* scope,
    Namespace* ns, char* name)
{
    mut ASTStructDecl* struct_decl = arena_alloc(arena,
        frx::sizeof(ASTStructDecl));

    struct_symbol_init(&struct_decl->symbol, scope, ns, name, false, true);

    struct_decl->is_redefinition = false;

    return struct_decl;
}

export ASTStructDecl* parse_struct_decl(Parser* parser)
{
    frx::assert(parser != nullptr);

    SourceLocation start = parser_current_location(parser);

    parser_eat(parser, TokenType::KW_EXTERN);

    parser_eat(parser, TokenType::KW_STRUCT);

    char* name = parser->token->identifier;

    mut ASTStructDecl* struct_decl = make_struct_decl(&parser->arena,
        parser->current_scope, parser->current_namespace, name);

    struct_decl->is_redefinition = !struct_table_insert(&parser->struct_table,
        &struct_decl->symbol);

    parser_eat(parser, TokenType::IDENTIFIER);

    parser_eat(parser, TokenType::SEMICOLON);

    struct_decl->range.start = start;
    struct_decl->range.end = parser_current_location(parser);

    return struct_decl;
}

export void print_struct_decl(ASTStructDecl* struct_decl, FILE* file,
    usize depth)
{
    frx::assert(struct_decl != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    StructSymbol* symbol = &struct_decl->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AstType::STRUCT_DECL),
        symbol->name);
}
