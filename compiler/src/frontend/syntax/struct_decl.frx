import "../core/parser.frx";

export struct ASTStructDecl
{
    SourceRange range;

    StructSymbol symbol;

    b8 is_redefinition;
}

export ASTStructDecl* make_struct_decl(Arena* arena, Scope* scope,
    Namespace* ns, char* name)
{
    ASTStructDecl* struct_decl = arena_alloc(arena, sizeof(ASTStructDecl));

    struct_symbol_init(&struct_decl->symbol, scope, ns, name, false, true);

    struct_decl->is_redefinition = false;

    return struct_decl;
}

export ASTStructDecl* parse_struct_decl(Parser* parser)
{
    assert(parser != nullptr);

    SourceLocation start = parser_current_location(parser);

    parser_eat(parser, TOKEN_TYPE_KW_EXTERN);

    parser_eat(parser, TOKEN_TYPE_KW_STRUCT);

    char* name = parser->token->identifier;

    ASTStructDecl* struct_decl = make_struct_decl(&parser->arena,
        parser->current_scope, parser->current_namespace, name);

    struct_decl->is_redefinition = !struct_table_insert(&parser->struct_table,
        &struct_decl->symbol);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_SEMICOLON);

    struct_decl->range.start = start;
    struct_decl->range.end = parser_current_location(parser);

    return struct_decl;
}

export void print_struct_decl(ASTStructDecl* struct_decl, FILE* file,
    usize depth)
{
    assert(struct_decl != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    StructSymbol* symbol = &struct_decl->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_STRUCT_DECL),
        symbol->name);
}
