export import "../ast/struct_def.frx";
import "type_specifier.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";
import "../symbols/struct.frx";
import "../../core/list.frx";
import "../../core/symbol_table.frx";

StructField* struct_field_parse(Parser* parser)
{
    frx::assert(parser != nullptr);

    TypeSpecifier* type = type_specifier_parse(parser);

    char* name = parser->token->identifier;

    parser_eat(parser, TokenType::IDENTIFIER);
    type_specifier_parse_array_dimensions(parser, type);
    parser_eat(parser, TokenType::SEMICOLON);

    return struct_field_new(&parser->arena, type, name);
}

export StructDef* struct_def_parse(Parser* parser, b8 exported)
{
    frx::assert(parser != nullptr);

    SourceLocation start = parser_current_location(parser);

    parser_eat(parser, TokenType::KW_STRUCT);

    char* name = parser->token->identifier;

    mut StructDef* struct_def = struct_def_new(&parser->arena, parser->current_scope,
            nullptr, name, exported);

    StructSymbol* symbol = &struct_def->symbol;
    symbol_table_insert(&parser->module->symbol_table, SymbolType::STRUCT, symbol->name, symbol->exported, symbol);

    parser_eat(parser, TokenType::IDENTIFIER);

    parser_eat(parser, TokenType::LBRACE);

    while(parser_loop_until(parser, TokenType::RBRACE))
    {
        list_push(&struct_def->symbol.fields, struct_field_parse(parser));
    }

    struct_def->range.start = start;
    struct_def->range.end = parser_current_location(parser);

    parser_eat(parser, TokenType::RBRACE);

    return struct_def;
}
