import "type_specifier.frx";
import "../core/parser.frx";

export struct ASTStructField
{
    ASTTypeSpecifier* type;
    char* name;
}

ASTStructField* make_struct_field(Arena* arena, ASTTypeSpecifier* type,
    char* name)
{
    assert(type != nullptr);

    assert(name != nullptr);

    ASTStructField* field = arena_alloc(arena, sizeof(ASTStructField));

    field->type = type;
    field->name = name;

    return field;
}

ASTStructField* parse_struct_field(Parser* parser)
{
    assert(parser != nullptr);

    ASTTypeSpecifier* type = parse_type_specifier(parser);

    char* name = parser->token->identifier;

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);
    parse_array_dimensions(parser, type);
    parser_eat(parser, TOKEN_TYPE_SEMICOLON);

    return make_struct_field(&parser->arena, type, name);
}

void print_struct_field(ASTStructField* field, FILE* file, usize depth)
{
    assert(field != nullptr);

    assert(file != nullptr);

    fprintf(file, "%s\n", field->name);
}

export struct ASTStructDef
{
    SourceRange range;

    StructSymbol symbol;

    b8 is_redefinition;
}

export ASTStructDef* make_struct_def(Arena* arena, Scope* scope, Namespace* ns,
    char* name, b8 exported)
{
    ASTStructDef* struct_def = arena_alloc(arena, sizeof(ASTStructDef));

    struct_symbol_init(&struct_def->symbol, scope, ns, name, exported, false);

    struct_def->is_redefinition = false;

    return struct_def;
}

export ASTStructDef* parse_struct_def(Parser* parser, b8 exported)
{
    assert(parser != nullptr);

    SourceLocation start = parser_current_location(parser);

    parser_eat(parser, TOKEN_TYPE_KW_STRUCT);

    char* name = parser->token->identifier;

    ASTStructDef* struct_def = make_struct_def(&parser->arena,
        parser->current_scope, parser->current_namespace, name, exported);

    struct_def->is_redefinition = !struct_table_insert(&parser->struct_table,
        &struct_def->symbol);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_LBRACE);

    while(parser_loop_until(parser, TOKEN_TYPE_RBRACE))
    {
        list_push(&struct_def->symbol.fields, parse_struct_field(parser));
    }

    struct_def->range.start = start;
    struct_def->range.end = parser_current_location(parser);

    parser_eat(parser, TOKEN_TYPE_RBRACE);

    return struct_def;
}

export void print_struct_def(ASTStructDef* struct_def, FILE* file, usize depth)
{
    assert(struct_def != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    StructSymbol* symbol = &struct_def->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_STRUCT_DEF),
        symbol->name);

    usize i;
    for(i = 0; i < list_size(&symbol->fields); i = i + 1)
    {
        ASTStructField* field = list_get(&symbol->fields, i);
        print_struct_field(field, file, depth + 1);
    }
}
