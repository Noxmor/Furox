export struct ASTStructDef
{
    StructSymbol symbol;

    b8 is_redefinition;
}

export ASTStructDef* make_struct_def(Arena* arena, Namespace* ns, char* name,
    b8 exported)
{
    ASTStructDef* struct_def = arena_alloc(arena, sizeof(ASTStructDef));

    struct_symbol_init(&struct_def->symbol, ns, name, exported);

    return struct_def;
}

export ASTStructDef* parse_struct_def(Parser* parser, b8 exported)
{
    assert(parser != nullptr);

    parser_eat(parser, TOKEN_TYPE_KW_STRUCT);

    char* name = parser->token->identifier;

    ASTStructDef* struct_def = make_struct_def(&parser->arena,
        parser->current_namespace, name, exported);

    struct_def->is_redefinition = parser_find_struct_symbol(parser,
        parser->current_namespace, name)
        || !struct_table_insert(&parser->struct_table, &struct_def->symbol);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_LBRACE);

    //TODO: Parse fields of struct

    parser_eat(parser, TOKEN_TYPE_RBRACE);

    return struct_def;
}

export void print_struct_def(ASTStructDef* struct_def, FILE* file, usize depth)
{
    assert(struct_def != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    StructSymbol* symbol = &struct_def->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_STRUCT_DEF),
        symbol->name);
}
