export import "../ast/switch_stmt.frx";
import "expr.frx";
import "scope.frx";
import "../core/parser.frx";
import "../../core/list.frx";

namespace AST::SwitchCase
{
    SwitchCase* parse(Parser* parser)
    {
        frx::assert(parser != nullptr);

        parser_eat(parser, TokenType::KW_CASE);
        Expr* value = AST::Expr::parse(parser);
        parser_eat(parser, TokenType::COLON);
        Scope* scope = AST::Scope::parse(parser);

        return new(&parser->arena, value, scope);
    }
}

namespace AST::SwitchStmt
{
    export SwitchStmt* parse(Parser* parser)
    {
        frx::assert(parser != nullptr);

        parser_eat(parser, TokenType::KW_SWITCH);
        parser_eat(parser, TokenType::LPAREN);
        Expr* value = AST::Expr::parse(parser);
        parser_eat(parser, TokenType::RPAREN);

        mut SwitchStmt* switch_stmt = new(&parser->arena, value);

        parser_eat(parser, TokenType::LBRACE);
        while(parser->token->type == TokenType::KW_CASE)
        {
            SwitchCase* switch_case = AST::SwitchCase::parse(parser);
            add_case(switch_stmt, switch_case);
        }

        if(parser->token->type == TokenType::KW_DEFAULT)
        {
            parser_eat(parser, TokenType::KW_DEFAULT);
            parser_eat(parser, TokenType::COLON);

            set_default_scope(switch_stmt, AST::Scope::parse(parser));
        }

        parser_eat(parser, TokenType::RBRACE);

        return switch_stmt;
    }
}
