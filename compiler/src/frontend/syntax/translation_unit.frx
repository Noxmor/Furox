export import "../ast/compound.frx";
import "../ast/global_scope.frx";
import "enum_def.frx";
import "extern_block.frx";
import "func_decl.frx";
import "func_def.frx";
import "global_var_decl_or_def.frx";
import "import_stmt.frx";
import "struct_decl.frx";
import "struct_def.frx";
import "type_specifier.frx";
import "../core/parser.frx";

namespace AST::TranslationUnit
{
    export Compound* parse(Parser* parser)
    {
        Compound* translation_unit = AST::Compound::new(&parser->arena);

        while(parser->token->type != TokenType::EOF)
        {
            mut AST::GlobalScope* global_scope = nullptr;

            switch(parser->token->type)
            {
                case TokenType::KW_IMPORT:
                {
                    global_scope = AST::GlobalScope::from_import_stmt(&parser->arena,
                        AST::ImportStmt::parse(parser, false));

                    break;
                }
                case TokenType::KW_ENUM:
                {
                    global_scope = AST::GlobalScope::from_enum_def(&parser->arena,
                        AST::EnumDef::parse(parser, false));

                    break;
                }
                case TokenType::KW_STRUCT:
                {
                    global_scope = AST::GlobalScope::from_struct_def(&parser->arena,
                        AST::StructDef::parse(parser, false));

                    break;
                }
                case TokenType::KW_EXTERN:
                {
                    Token* next = Parser::peek(parser, 1);
                    if(next->type == TokenType::LBRACE)
                    {
                        global_scope = AST::GlobalScope::from_extern_block(&parser->arena,
                            AST::ExternBlock::parse(parser));
                    }
                    else if(next->type == TokenType::KW_STRUCT)
                    {
                        global_scope = AST::GlobalScope::from_struct_decl(&parser->arena,
                            AST::StructDecl::parse(parser));
                    }
                    else
                    {
                        Parser::eat(parser, TokenType::KW_EXTERN);

                        global_scope = AST::GlobalScope::from_func_decl(&parser->arena,
                            AST::FuncDecl::parse(parser));
                    }

                    break;
                }
                case TokenType::KW_EXPORT:
                {
                    Parser::eat(parser, TokenType::KW_EXPORT);

                    switch(parser->token->type)
                    {
                        case TokenType::KW_IMPORT:
                        {
                            global_scope = AST::GlobalScope::from_import_stmt(&parser->arena,
                                AST::ImportStmt::parse(parser, true));

                            break;
                        }
                        case TokenType::KW_ENUM:
                        {
                            global_scope = AST::GlobalScope::from_enum_def(&parser->arena,
                                AST::EnumDef::parse(parser, true));

                            break;
                        }
                        case TokenType::KW_STRUCT:
                        {
                            global_scope = AST::GlobalScope::from_struct_def(&parser->arena,
                                AST::StructDef::parse(parser, true));

                            break;
                        }
                        default:
                        {
                            TypeSpecifier* type_specifier = AST::TypeSpecifier::parse(parser);
                            global_scope = AST::GlobalScope::from_func_def(&parser->arena,
                                AST::FuncDef::parse(parser, type_specifier, true));

                            break;
                        }
                    }

                    break;
                }
                case TokenType::KW_U8:
                {

                }
                case TokenType::KW_U16:
                {

                }
                case TokenType::KW_U32:
                {

                }
                case TokenType::KW_U64:
                {

                }
                case TokenType::KW_USIZE:
                {

                }
                case TokenType::KW_I8:
                {

                }
                case TokenType::KW_I16:
                {

                }
                case TokenType::KW_I32:
                {

                }
                case TokenType::KW_I64:
                {

                }
                case TokenType::KW_ISIZE:
                {

                }
                case TokenType::KW_B8:
                {

                }
                case TokenType::KW_B16:
                {

                }
                case TokenType::KW_B32:
                {

                }
                case TokenType::KW_B64:
                {

                }
                case TokenType::KW_CHAR:
                {

                }
                case TokenType::KW_F32:
                {

                }
                case TokenType::KW_F64:
                {

                }
                case TokenType::KW_VOID:
                {

                }
                case TokenType::IDENTIFIER:
                {
                    TypeSpecifier* type_specifier = AST::TypeSpecifier::parse(parser);

                    Token* next = Parser::peek(parser, 1);
                    if(next->type == TokenType::LPAREN)
                    {
                        global_scope = AST::GlobalScope::from_func_def(&parser->arena,
                            AST::FuncDef::parse(parser, type_specifier, false));
                    }
                    else
                    {
                        global_scope = AST::GlobalVarDeclOrDef::parse(parser, type_specifier,
                            false);
                    }

                    break;
                }
                case TokenType::KW_MUT:
                {
                    Parser::eat(parser, TokenType::KW_MUT);

                    TypeSpecifier* type = AST::TypeSpecifier::parse(parser);
                    global_scope = AST::GlobalVarDeclOrDef::parse(parser, type, true);

                    break;
                }
                default:
                {
                    Parser::panic(parser);

                    Parser::advance(parser);

                    break;
                }
            }

            if(global_scope != nullptr)
            {
                AST::Compound::add_node(translation_unit, global_scope);
            }
        }

        return translation_unit;
    }
}
