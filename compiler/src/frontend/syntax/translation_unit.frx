export import "../ast/compound.frx";
import "../ast/global_scope.frx";
import "enum_def.frx";
import "extern_block.frx";
import "func_decl.frx";
import "func_def.frx";
import "global_var_decl_or_def.frx";
import "import_stmt.frx";
import "struct_decl.frx";
import "struct_def.frx";
import "type_specifier.frx";
import "../core/parser.frx";

export Compound* translation_unit_parse(Parser* parser)
{
    Compound* translation_unit = compound_new(&parser->arena);

    while(parser->token->type != TokenType::EOF)
    {
        mut GlobalScope* global_scope = nullptr;

        switch(parser->token->type)
        {
            case TokenType::KW_IMPORT:
                {
                    global_scope = global_scope_from_import_stmt(&parser->arena,
                            import_stmt_parse(parser, false));

                    break;
                }
            case TokenType::KW_ENUM:
                {
                    global_scope = global_scope_from_enum_def(&parser->arena,
                            enum_def_parse(parser, false));

                    break;
                }
            case TokenType::KW_STRUCT:
                {
                    global_scope = global_scope_from_struct_def(&parser->arena,
                            struct_def_parse(parser, false));

                    break;
                }
            case TokenType::KW_EXTERN:
                {
                    Token* next = parser_peek(parser, 1);
                    if(next->type == TokenType::LBRACE)
                    {
                        global_scope = global_scope_from_extern_block(&parser->arena,
                                extern_block_parse(parser));
                    }
                    else if(next->type == TokenType::KW_STRUCT)
                    {
                        global_scope = global_scope_from_struct_decl(&parser->arena,
                                struct_decl_parse(parser));
                    }
                    else
                    {
                        parser_eat(parser, TokenType::KW_EXTERN);

                        global_scope = global_scope_from_func_decl(&parser->arena,
                                func_decl_parse(parser));
                    }

                    break;
                }
            case TokenType::KW_EXPORT:
                {
                    parser_eat(parser, TokenType::KW_EXPORT);

                    switch(parser->token->type)
                    {
                        case TokenType::KW_IMPORT:
                            {
                                global_scope = global_scope_from_import_stmt(&parser->arena,
                                        import_stmt_parse(parser, true));

                                break;
                            }
                        case TokenType::KW_ENUM:
                            {
                                global_scope = global_scope_from_enum_def(&parser->arena,
                                        enum_def_parse(parser, true));

                                break;
                            }
                        case TokenType::KW_STRUCT:
                            {
                                global_scope = global_scope_from_struct_def(&parser->arena,
                                        struct_def_parse(parser, true));

                                break;
                            }
                        default:
                            {
                                TypeSpecifier* type_specifier = type_specifier_parse(parser);
                                global_scope = global_scope_from_func_def(&parser->arena,
                                        func_def_parse(parser, type_specifier, true));

                                break;
                            }
                    }

                    break;
                }
            case TokenType::KW_U8:
                {

                }
            case TokenType::KW_U16:
                {

                }
            case TokenType::KW_U32:
                {

                }
            case TokenType::KW_U64:
                {

                }
            case TokenType::KW_USIZE:
                {

                }
            case TokenType::KW_I8:
                {

                }
            case TokenType::KW_I16:
                {

                }
            case TokenType::KW_I32:
                {

                }
            case TokenType::KW_I64:
                {

                }
            case TokenType::KW_ISIZE:
                {

                }
            case TokenType::KW_B8:
                {

                }
            case TokenType::KW_B16:
                {

                }
            case TokenType::KW_B32:
                {

                }
            case TokenType::KW_B64:
                {

                }
            case TokenType::KW_CHAR:
                {

                }
            case TokenType::KW_F32:
                {

                }
            case TokenType::KW_F64:
                {

                }
            case TokenType::KW_VOID:
                {

                }
            case TokenType::IDENTIFIER:
                {
                    TypeSpecifier* type_specifier = type_specifier_parse(parser);

                    Token* next = parser_peek(parser, 1);
                    if(next->type == TokenType::LPAREN)
                    {
                        global_scope = global_scope_from_func_def(&parser->arena,
                                func_def_parse(parser, type_specifier, false));
                    }
                    else
                    {
                        global_scope = global_var_decl_or_def_parse(parser, type_specifier,
                                false);
                    }

                    break;
                }
            case TokenType::KW_MUT:
                {
                    parser_eat(parser, TokenType::KW_MUT);

                    TypeSpecifier* type = type_specifier_parse(parser);
                    global_scope = global_var_decl_or_def_parse(parser, type, true);

                    break;
                }
            default:
                {
                    parser_panic(parser);

                    parser_advance(parser);

                    break;
                }
        }

        if(global_scope != nullptr)
        {
            compound_add_node(translation_unit, global_scope);
        }
    }

    return translation_unit;
}
