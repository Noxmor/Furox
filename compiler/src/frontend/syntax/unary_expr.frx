import "../core/ast.frx";
import "../core/parser.frx";

export struct ASTUnaryExpr
{
    TokenType type;
    Operator operator;
    AST* operand;
}

export ASTUnaryExpr* make_unary_expr(Arena* arena, TokenType type,
    Operator operator, AST* operand)
{
    assert(operator != OP_INVALID && operator < OP_COUNT);

    assert(operand != nullptr);

    ASTUnaryExpr* unary_expr = arena_alloc(arena, sizeof(ASTUnaryExpr));

    unary_expr->type = type;
    unary_expr->operator = operator;
    unary_expr->operand = operand;

    return unary_expr;
}

export void print_unary_expr(ASTUnaryExpr* expr, FILE* file, usize depth)
{
    assert(expr != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_UNARY_EXPR),
        token_type_to_str(expr->type));

    print_ast(expr->operand, file, depth + 1);
}
