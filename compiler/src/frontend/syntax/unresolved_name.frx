import "../core/ast.frx";
import "../core/parser.frx";
import "../core/scope.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTUnresolvedName
{
    SourceRange range;

    char* name;
    Scope* scope;
}

ASTUnresolvedName* make_unresolved_name(Arena* arena, char* name, Scope* scope)
{
    frx::assert(name != nullptr);

    mut ASTUnresolvedName* unresolved_name = arena_alloc(arena,
        frx::sizeof(ASTUnresolvedName));

    unresolved_name->name = name;
    unresolved_name->scope = scope;

    return unresolved_name;
}

export ASTUnresolvedName* parse_unresolved_name(Parser* parser)
{
    frx::assert(parser != nullptr);

    SourceLocation start = parser_current_location(parser);

    char* name = parser->token->identifier;
    Scope* scope = parser->current_scope;

    SourceLocation end = parser_current_location(parser);

    parser_eat(parser, TokenType::IDENTIFIER);

    mut ASTUnresolvedName* unresolved_name =
        make_unresolved_name(&parser->arena, name, scope);

    unresolved_name->range.start = start;
    unresolved_name->range.end = end;

    return unresolved_name;
}

export void print_unresolved_name(ASTUnresolvedName* unresolved_name,
    FILE* file, usize depth)
{
    frx::assert(unresolved_name != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AstType::UNRESOLVED_NAME),
        unresolved_name->name);
}

