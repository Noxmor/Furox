import "namespace_resolution.frx";
import "../core/ast.frx";
import "../core/namespace.frx";
import "../core/parser.frx";
import "../core/scope.frx";

extern struct FILE;

extern
{
    i32 fprintf(mut FILE* stream, char* format, ...);
}

export struct ASTUnresolvedNamespacedName
{
    SourceRange range;

    Namespace* ns;
    char* name;
    Scope* scope;
}

ASTUnresolvedNamespacedName* make_unresolved_namespaced_name(Arena* arena,
    Namespace* ns, char* name, Scope* scope)
{
    frx::assert(ns != nullptr);

    frx::assert(name != nullptr);

    mut ASTUnresolvedNamespacedName* unresolved_namespaced_name =
        arena_alloc(arena, frx::sizeof(ASTUnresolvedNamespacedName));

    unresolved_namespaced_name->ns = ns;
    unresolved_namespaced_name->name = name;
    unresolved_namespaced_name->scope = scope;

    return unresolved_namespaced_name;
}

export ASTUnresolvedNamespacedName* parse_unresolved_namespaced_name(
    Parser* parser, Namespace* ns, SourceLocation start)
{
    frx::assert(parser != nullptr);

    char* name = parser->token->identifier;
    Scope* scope = parser->current_scope;

    SourceLocation end = parser_current_location(parser);

    parser_eat(parser, TokenType::IDENTIFIER);

    mut ASTUnresolvedNamespacedName* unresolved_namespaced_name =
        make_unresolved_namespaced_name(&parser->arena, ns, name, scope);

    unresolved_namespaced_name->range.start = start;
    unresolved_namespaced_name->range.end = end;

    return unresolved_namespaced_name;
}

export void print_unresolved_namespaced_name(
    ASTUnresolvedNamespacedName* unresolved_namespaced_name, FILE* file,
    usize depth)
{
    frx::assert(unresolved_namespaced_name != nullptr);

    frx::assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (",
        ast_type_to_str(AstType::UNRESOLVED_NAMESPACED_NAME));

    print_namespace_resolution(file, unresolved_namespaced_name->ns);

    fprintf(file, "%s)\n", unresolved_namespaced_name->name);
}
