export struct ASTVarDecl
{
    VarSymbol* symbol;
}

export ASTVarDecl* make_var_decl(Arena* arena, ASTTypeSpecifier* type,
    Scope* scope, char* name)
{
    ASTVarDecl* var_decl = arena_alloc(arena, sizeof(ASTVarDecl));

    var_decl->symbol = var_table_find_or_insert(scope, name);

    var_decl->symbol->type = type;

    return var_decl;
}

export ASTVarDecl* parse_var_decl(Parser* parser, ASTTypeSpecifier* type)
{
    assert(parser != nullptr);

    ASTVarDecl* var_decl = make_var_decl(&parser->arena, type,
        parser->current_scope, parser->token->identifier);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_SEMICOLON);

    return var_decl;
}

export void print_var_decl(ASTVarDecl* var_decl, FILE* file, usize depth)
{
    assert(var_decl != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    VarSymbol* symbol = var_decl->symbol;

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_VAR_DECL),
        symbol->name);

    print_type_specifier(symbol->type, file, depth + 1);
}
