export struct ASTVarDef
{
    VarSymbol* symbol;

    ASTTypeSpecifier* type;
    Scope* scope;
    char* name;

    AST* value;
}

export ASTVarDef* make_var_def(Arena* arena, ASTTypeSpecifier* type,
    Scope* scope, char* name)
{
    assert(type != nullptr);

    assert(name != nullptr);

    ASTVarDef* var_def = arena_alloc(arena, sizeof(ASTVarDef));

    var_def->symbol = var_table_insert(type, scope, name);

    var_def->type = type;
    var_def->scope = scope;
    var_def->name = name;

    return var_def;
}

export ASTVarDef* parse_var_def(Parser* parser, ASTTypeSpecifier* type)
{
    assert(parser != nullptr);

    ASTVarDef* var_def = make_var_def(&parser->arena, type,
        parser->current_scope, parser->token->identifier);

    parser_eat(parser, TOKEN_TYPE_IDENTIFIER);

    parser_eat(parser, TOKEN_TYPE_EQ);

    var_def->value = parse_expr(parser);

    parser_eat(parser, TOKEN_TYPE_SEMICOLON);

    return var_def;
}

export void print_var_def(ASTVarDef* var_def, FILE* file, usize depth)
{
    assert(var_def != nullptr);

    assert(file != nullptr);

    print_ast_depth(file, depth);

    fprintf(file, "%s (%s)\n", ast_type_to_str(AST_TYPE_VAR_DEF),
        var_def->name);

    print_type_specifier(var_def->type, file, depth + 1);
    print_ast(var_def->value, file, depth + 1);
}
